{"version":3,"sources":["utils/stateManagement.tsx","utils/dataSetHelpers.tsx","components/UploadArea.tsx","utils/ArrayBuffer-StringHelper.tsx","utils/parseData.tsx","utils/colorGeneration.tsx","components/BarChart.tsx","components/Dashboard.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["INSTANCE_DATA","MY_CHAR_NAME","setLocalStorageField","key","data","localStorage","setItem","JSON","stringify","DISCONNECTED","ARENA_INSTANCE_IDS","PLAYER_KEYS","filterArenaMatches","myCharName","filterSkirmish","filteredData","filter","match","playerName","modifiedData","forEach","moddedMatch","enteredTime","instanceID","instanceName","enemyTeamComp","myTeamComp","bracket","myTeam","enemyTeam","win","moddedMatchData","goldTeam","hasOwnProperty","purpleTeam","winningFaction","myTeamNames","Object","keys","enemyTeamNames","myTeamPlayerCount","length","enemyTeamPlayerCount","Math","max","arenaBracket","i","push","fillNameArraysWithBlanks","myModdedTeam","enemyModdedTeam","name","idx","getModdedTeamsAndTeamComps","sort","getModdedArenaData","assign","filteredSkirmishes","player1","teamMMR","teamObj","moddedTeamObj","compArr","playerDCed","class","fillTeamCompObject","obj","matchCount","wins","Number","UploadArea","localStoreChangeHandler","localStorageChangeValue","useState","text","setText","onDrop","useCallback","acceptedFiles","file","reader","FileReader","onabort","onerror","onload","buf","binaryStr","result","state","window","getItem","parsedState","parse","mergedState","filteredState","Map","map","item","values","mergeState","start","lastIndexOf","newStr","slice","enumRegexp","RegExp","instanceDataArray","replaceAll","split","parsedData","el","e","parseData","TextDecoder","decode","Uint8Array","includes","readAsArrayBuffer","useDropzone","getRootProps","getInputProps","className","calculatePoint","index","intervalSize","colorRangeInfo","colorStart","colorEnd","useEndAsStart","BarChart","dataset","totalMatchNumber","labelArr","dataArr","winsArr","colorArray","labels","datasets","label","backgroundColor","borderColor","borderWidth","hoverOffset","datasetKeys","getOwnPropertyNames","sortableEntries","teamComp","a","b","entry","dataLength","colorScale","targetArray","colorPoint","generateChartColors","interpolateTurbo","chartTitle","options","indexAxis","responsive","scales","y","ticks","color","font","size","family","stepSize","beginAtZero","plugins","tooltip","callbacks","afterLabel","dataIndex","winrate","toFixed","legend","display","Dashboard","props","useForm","register","handleSubmit","setMyCharName","matchData","setMatchData","localStorageChanged","setLocalStorageChanged","chartDataset","setChartDataset","useEffect","setReactState","currentState","localStorageToState","lsMatchState","lsCharNameState","hasDCedPlayers","enemyTeamCompString","reduce","concat","createBasicChartDataset","onSubmit","charName","placeholder","type","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3dd42e53.chunk.js","sourcesContent":["import React from \"react\";\nimport { ArenaMatch } from \"../Types/ArenaTypes\";\n\nexport const INSTANCE_DATA = \"instanceData\";\nexport const MY_CHAR_NAME = \"myCharName\";\n\nexport function mergeState(filteredData: ArenaMatch[]): void {\n  const filterKey = \"enteredTime\";\n  const state = window.localStorage.getItem(INSTANCE_DATA);\n\n  if (!state) {\n    setLocalStorageField(INSTANCE_DATA, filteredData);\n    return;\n  }\n  const parsedState = JSON.parse(state);\n  const mergedState = [...parsedState, ...filteredData];\n\n  const filteredState = [\n    ...new Map(mergedState.map((item) => [item[filterKey], item])).values(),\n  ];\n\n  setLocalStorageField(INSTANCE_DATA, filteredState);\n}\n\nexport function localStorageToState(\n  key: string,\n  setReactState: React.Dispatch<React.SetStateAction<any>>\n): void {\n  const currentState = window.localStorage.getItem(key);\n  currentState && setReactState(JSON.parse(currentState));\n}\n\nexport function setLocalStorageField(key: string, data: any): void {\n  localStorage.setItem(key, JSON.stringify(data));\n}\n","import {\n  ArenaMatch,\n  arenaPlayerKeys,\n  ArenaTeam,\n  ModdedArenaMatch,\n  ModdedArenaTeam,\n  TeamCompDataset,\n} from \"../Types/ArenaTypes\";\n\nconst DISCONNECTED = \"!disconnected\";\n// const MY_TEAMMATE_NAME: string = \"Induator\";\nconst ARENA_INSTANCE_IDS: number[] = [572, 562, 559]; // \"Ruins of Lordaeron\", \"Blade's Edge Arena\", \"Nagrand Arena\"\nconst PLAYER_KEYS: arenaPlayerKeys[] = [\n  \"player1\",\n  \"player2\",\n  \"player3\",\n  \"player4\",\n  \"player5\",\n];\n\nexport function filterJunkData(data: ArenaMatch[]): ArenaMatch[] {\n  return data.filter(\n    (match) =>\n      ARENA_INSTANCE_IDS.includes(match.instanceID) &&\n      match.hasOwnProperty(\"purpleTeam\") &&\n      match.hasOwnProperty(\"goldTeam\")\n  );\n}\n\nexport function filterArenaMatches(\n  data: ArenaMatch[],\n  myCharName: string,\n  filterSkirmish: boolean\n): ModdedArenaMatch[] {\n  const filteredData = data.filter((match) => {\n    return match.playerName === myCharName;\n  });\n  let modifiedData: ModdedArenaMatch[] = [];\n  filteredData.forEach((match) => {\n    const moddedMatch: ModdedArenaMatch = {\n      enteredTime: match.enteredTime,\n      instanceID: match.instanceID,\n      instanceName: match.instanceName,\n      playerName: match.playerName,\n      enemyTeamComp: [],\n      myTeamComp: [],\n      bracket: 0,\n      myTeam: {},\n      enemyTeam: {},\n      win: false,\n    };\n\n    const moddedMatchData = getModdedArenaData(match);\n    Object.assign(moddedMatch, moddedMatchData);\n    modifiedData.push(moddedMatch);\n  });\n  if (filterSkirmish) {\n    const filteredSkirmishes = modifiedData.filter(\n      (match) =>\n        !(\n          match.myTeam.player1?.teamMMR === 0 &&\n          match.enemyTeam.player1?.teamMMR === 0\n        )\n    );\n    modifiedData = filteredSkirmishes;\n  }\n  return modifiedData;\n}\n\nfunction getModdedArenaData(match: ArenaMatch): any {\n  let myTeam: ArenaTeam, enemyTeam: ArenaTeam, win: boolean;\n  const myCharName = match.playerName;\n  if (match.goldTeam.hasOwnProperty(myCharName)) {\n    myTeam = match.goldTeam;\n    enemyTeam = match.purpleTeam;\n    win = !!match.winningFaction; //WIN\n  } else {\n    myTeam = match.purpleTeam;\n    enemyTeam = match.goldTeam;\n    win = !match.winningFaction; //WIN\n  }\n\n  const myTeamNames: (string | null)[] = Object.keys(myTeam);\n  const enemyTeamNames: (string | null)[] = Object.keys(enemyTeam);\n  const myTeamPlayerCount = myTeamNames.length;\n  const enemyTeamPlayerCount = enemyTeamNames.length;\n  const bracket = Math.max(myTeamPlayerCount, enemyTeamPlayerCount); // BRACKET\n  fillNameArraysWithBlanks(myTeamNames, enemyTeamNames, bracket);\n\n  // modded arena team\n  let myModdedTeam: ModdedArenaTeam = {};\n  let myTeamComp: string[] = [];\n  let enemyModdedTeam: ModdedArenaTeam = {};\n  let enemyTeamComp: string[] = [];\n  myTeamNames.forEach((name, idx) =>\n    getModdedTeamsAndTeamComps(name, idx, myTeam, myModdedTeam, myTeamComp)\n  );\n  enemyTeamNames.forEach((name, idx) =>\n    getModdedTeamsAndTeamComps(\n      name,\n      idx,\n      enemyTeam,\n      enemyModdedTeam,\n      enemyTeamComp\n    )\n  );\n  return {\n    bracket,\n    win,\n    myTeam: myModdedTeam,\n    myTeamComp: myTeamComp.sort(),\n    enemyTeam: enemyModdedTeam,\n    enemyTeamComp: enemyTeamComp.sort(),\n  };\n}\n\nfunction getModdedTeamsAndTeamComps(\n  name: string | null,\n  idx: number,\n  teamObj: ArenaTeam,\n  moddedTeamObj: ModdedArenaTeam,\n  compArr: string[]\n) {\n  const playerDCed = name === null;\n  moddedTeamObj[PLAYER_KEYS[idx]] = playerDCed\n    ? null\n    : {\n        name: name,\n        ...teamObj[name],\n      };\n  compArr.push(playerDCed ? DISCONNECTED : teamObj[name].class);\n}\n\nfunction fillNameArraysWithBlanks(\n  myTeamNames: (string | null)[],\n  enemyTeamNames: (string | null)[],\n  arenaBracket: number\n): void {\n  if (myTeamNames.length < arenaBracket) {\n    for (let i = 0; i < arenaBracket - myTeamNames.length; i++) {\n      myTeamNames.push(null);\n    }\n  }\n  if (enemyTeamNames.length < arenaBracket) {\n    for (let i = 0; i < arenaBracket - enemyTeamNames.length; i++) {\n      enemyTeamNames.push(null);\n    }\n  }\n}\n\nexport function createBasicChartDataset(\n  data: ModdedArenaMatch[]\n): TeamCompDataset {\n  const dataset: TeamCompDataset = {};\n  data.forEach((match) => {\n    const hasDCedPlayers =\n      match.enemyTeamComp.includes(DISCONNECTED) ||\n      match.myTeamComp.includes(DISCONNECTED);\n    const enemyTeamCompString = teamcompArrToString(match.enemyTeamComp);\n    if (hasDCedPlayers) {\n      fillTeamCompObject(dataset, \"DC\", match);\n    } else {\n      fillTeamCompObject(dataset, enemyTeamCompString, match);\n    }\n  });\n\n  return dataset;\n}\n\nfunction fillTeamCompObject(\n  obj: TeamCompDataset,\n  key: string,\n  match: ModdedArenaMatch\n): void {\n  if (obj[key]) {\n    obj[key].matchCount += 1;\n    match.win && obj[key].wins++;\n  } else {\n    obj[key] = { matchCount: 1, wins: Number(match.win) };\n  }\n}\n\nfunction teamcompArrToString(arr: string[]): string {\n  return arr.reduce((a, b) => a.concat(\" \\\\ \", b));\n}\n","import React, { useCallback, useState } from \"react\";\nimport { parseData } from \"../utils/parseData\";\nimport { arrayBufferToString } from \"../utils/ArrayBuffer-StringHelper\";\nimport { useDropzone } from \"react-dropzone\";\nimport { mergeState } from \"../utils/stateManagement\";\nimport { filterJunkData } from \"../utils/dataSetHelpers\";\n\nexport type landingProps = {\n  localStoreChangeHandler: React.Dispatch<React.SetStateAction<boolean>>;\n  localStorageChangeValue: boolean;\n};\n\nconst UploadArea: React.FC<landingProps> = ({\n  localStoreChangeHandler,\n  localStorageChangeValue,\n}) => {\n  const [text, setText] = useState(\"Upload file here\");\n\n  const onDrop = useCallback(\n    (acceptedFiles) => {\n      acceptedFiles.forEach((file: any) => {\n        //TBD\n        const reader = new FileReader();\n\n        reader.onabort = () => setText(\"File reading was aborted\");\n        reader.onerror = () => setText(\"File reading failed\");\n        reader.onload = () => {\n          const binaryStr = reader.result;\n          mergeState(filterJunkData(parseData(arrayBufferToString(binaryStr))));\n          localStoreChangeHandler(!localStorageChangeValue);\n          setText(\"File successfully parsed\");\n        };\n        reader.readAsArrayBuffer(file);\n      });\n    },\n    [localStoreChangeHandler, localStorageChangeValue]\n  );\n  const { getRootProps, getInputProps } = useDropzone({ onDrop });\n  return (\n    <div {...getRootProps()} className=\"upload-area\">\n      <input {...getInputProps()} />\n      <p>{text}</p>\n    </div>\n  );\n};\n\nexport default UploadArea;\n","export function arrayBufferToString(buf: string | ArrayBuffer | null): string {\n  if (buf === null || typeof buf === \"string\") {\n    return '{\"error\":true}';\n  }\n  let jsonKey: string = \"\";\n  // ** works, but fails with unicode chars **\n  // new Uint8Array(buf).forEach(\n  //   (byte: number) => (jsonKey += String.fromCharCode(byte))\n  // );\n  jsonKey = new TextDecoder().decode(new Uint8Array(buf));\n  return jsonKey;\n}\n\nexport function stringToArrayBuffer(str: string) {\n  var buf = new ArrayBuffer(str.length * 2); // 2 bytes for each char\n  var bufView = new Uint16Array(buf);\n  for (var i = 0, strLen = str.length; i < strLen; i++) {\n    bufView[i] = str.charCodeAt(i);\n  }\n  return buf;\n}\n","import { ArenaMatch } from \"../Types/ArenaTypes\";\n\nexport const parseData = (data: string): ArenaMatch[] => {\n  // Get part of the string with actual instance data\n  const start = data.lastIndexOf('[\"instances\"] = ') + 17; // Only works if actual instance object is last in data set\n  const newStr = data.slice(start);\n\n  // Clean up the string and split it in separate objects\n  const enumRegexp = new RegExp(/, -- \\[\\d+\\]/, \"g\");\n  const instanceDataArray = newStr\n    .replaceAll(\"\\n\", \"\")\n    .replaceAll(\"\\r\", \"\")\n    .replaceAll(\"\\t\", \"\")\n    .replaceAll('[\"', '\"')\n    .replaceAll('\"]', '\"')\n    .replaceAll(\" = \", \":\")\n    .replaceAll(\",}\", \"}\")\n    .split(enumRegexp);\n\n  // Parse all valid objects\n  let parsedData: ArenaMatch[] = [];\n  instanceDataArray.forEach((el, idx) => {\n    try {\n      parsedData.push(JSON.parse(el));\n    } catch (e) {\n      // Ignore failed parses (random strings and AB instances)\n      // console.log(e);\n    }\n  });\n  return parsedData;\n};\n","import { ColorRangeInfo } from \"../Types/ArenaTypes\";\n\nfunction calculatePoint(\n  index: number,\n  intervalSize: number,\n  colorRangeInfo: ColorRangeInfo\n) {\n  const { colorStart, colorEnd, useEndAsStart } = colorRangeInfo;\n  return useEndAsStart\n    ? colorEnd - index * intervalSize\n    : colorStart + index * intervalSize;\n}\n\nexport default function generateChartColors(\n  dataLength: number,\n  colorScale: (i: number) => string,\n  colorRangeInfo: ColorRangeInfo,\n  targetArray: string[]\n) {\n  const { colorStart, colorEnd } = colorRangeInfo;\n  const colorRange = colorEnd - colorStart;\n  const intervalSize = colorRange / dataLength;\n  let i, colorPoint;\n\n  for (i = 0; i < dataLength; i++) {\n    colorPoint = calculatePoint(i, intervalSize, colorRangeInfo);\n    targetArray.push(colorScale(colorPoint));\n  }\n}\n\nexport {};\n","import React from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport { interpolateTurbo } from \"d3-scale-chromatic\";\nimport {\n  ChartDataSet,\n  ColorRangeInfo,\n  SortableTeamCompObj,\n  TeamCompDataset,\n} from \"../Types/ArenaTypes\";\nimport generateChartColors from \"../utils/colorGeneration\";\n\ntype BarChartProps = {\n  dataset: TeamCompDataset;\n};\n\nconst BarChart: React.FC<BarChartProps> = ({ dataset }) => {\n  const colorRangeInfo: ColorRangeInfo = {\n    colorStart: 0.1,\n    colorEnd: 0.85,\n    useEndAsStart: true,\n  };\n  let totalMatchNumber = 0;\n  const labelArr: (string | string[])[] = [];\n  const dataArr: number[] = [];\n  const winsArr: number[] = [];\n  let colorArray: string[] = [];\n  const options: any = {\n    indexAxis: \"y\",\n    responsive: true,\n    scales: {\n      y: {\n        ticks: {\n          color: \"#292F36\",\n          font: { size: 15, family: \"'Roboto', sans-serif\" },\n          stepSize: 1,\n          beginAtZero: true,\n        },\n      },\n    },\n    plugins: {\n      tooltip: {\n        callbacks: {\n          afterLabel: (tooltip: any) => {\n            const index = tooltip.dataIndex;\n            const wins = tooltip.dataset.wins[index];\n            const matchCount = tooltip.dataset.data[index];\n            const winrate: string = ((wins / matchCount) * 100).toFixed(1);\n            const textToDisplay = [\n              `Wins: ${wins}, Losses: ${matchCount - wins}`,\n              `WR: ${winrate}%`,\n            ];\n            return textToDisplay;\n          },\n        },\n      },\n      legend: {\n        display: false,\n      },\n    },\n  };\n  const data: ChartDataSet = {\n    labels: labelArr,\n    datasets: [\n      {\n        label: \"\",\n        data: dataArr,\n        wins: winsArr,\n        backgroundColor: colorArray,\n        borderColor: [],\n        borderWidth: 1,\n        hoverOffset: 6,\n      },\n    ],\n  };\n\n  const datasetKeys = Object.getOwnPropertyNames(dataset);\n  const sortableEntries: SortableTeamCompObj[] = [];\n  datasetKeys.forEach((key) => {\n    const { matchCount, wins } = dataset[key];\n    sortableEntries.push({ teamComp: key, matchCount, wins });\n  });\n  sortableEntries.sort((a, b) => b.matchCount - a.matchCount);\n  sortableEntries.forEach((entry) => {\n    const { matchCount, wins, teamComp } = entry;\n    totalMatchNumber += matchCount;\n    labelArr.push([teamComp]);\n    dataArr.push(matchCount);\n    winsArr.push(wins);\n  });\n  generateChartColors(\n    sortableEntries.length,\n    interpolateTurbo,\n    colorRangeInfo,\n    colorArray\n  );\n\n  const chartTitle: string = `Matches Played: ${totalMatchNumber}`;\n\n  return (\n    <>\n      <div className=\"header\">\n        <h1 className=\"title\">{chartTitle}</h1>\n      </div>\n      <Bar data={data} options={options} />\n    </>\n  );\n};\n\nexport default BarChart;\n","import React, { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport UploadArea from \"./UploadArea\";\nimport {\n  INSTANCE_DATA,\n  localStorageToState,\n  MY_CHAR_NAME,\n  setLocalStorageField,\n} from \"../utils/stateManagement\";\nimport {\n  CharnameFormData,\n  ModdedArenaMatch,\n  TeamCompDataset,\n} from \"../Types/ArenaTypes\";\nimport BarChart from \"./BarChart\";\nimport {\n  createBasicChartDataset,\n  filterArenaMatches,\n} from \"../utils/dataSetHelpers\";\n\nexport type dashboardProps = {\n  className?: string;\n};\n\nconst Dashboard: React.FC<dashboardProps> = (props) => {\n  const { register, handleSubmit } = useForm();\n  const [myCharName, setMyCharName] = useState<string>(\"\");\n  const [matchData, setMatchData] = useState<ModdedArenaMatch[]>([]);\n  const [localStorageChanged, setLocalStorageChanged] =\n    useState<boolean>(false);\n  const [chartDataset, setChartDataset] = useState<TeamCompDataset>({});\n  useEffect(() => {\n    localStorageToState(MY_CHAR_NAME, setMyCharName);\n  }, []);\n  useEffect(() => {\n    const lsMatchState = window.localStorage.getItem(INSTANCE_DATA);\n    const lsCharNameState = window.localStorage.getItem(MY_CHAR_NAME);\n    lsMatchState &&\n      lsCharNameState &&\n      setMatchData(\n        filterArenaMatches(\n          JSON.parse(lsMatchState),\n          JSON.parse(lsCharNameState),\n          true\n        )\n      );\n  }, [localStorageChanged]);\n  useEffect(\n    () => setChartDataset(createBasicChartDataset(matchData)), // create dataset\n    [matchData]\n  );\n\n  const onSubmit = (data: CharnameFormData) => {\n    setLocalStorageField(MY_CHAR_NAME, data.charName);\n    setLocalStorageChanged(!localStorageChanged);\n  };\n\n  return (\n    <div className=\"dashboard\">\n      <div className=\"dashboard__top-bar\">\n        <UploadArea\n          localStoreChangeHandler={setLocalStorageChanged}\n          localStorageChangeValue={localStorageChanged}\n        />\n        <div className=\"dashboard__filters\">\n          <form onSubmit={handleSubmit(onSubmit)}>\n            <input\n              className=\"dashboard__charname-input\"\n              {...register(\"charName\")}\n              placeholder={`${myCharName}`}\n            />\n            <button className=\"dashboard__submit-charname\" type=\"submit\">\n              Submit\n            </button>\n          </form>\n          <div className=\"dashboard__filters-btn\" onClick={() => {}}>\n            All data\n          </div>\n          <div className=\"dashboard__filters-btn\">Last session</div>\n        </div>\n      </div>\n      {matchData && (\n        <div className=\"dashboard__chart-container\">\n          <BarChart dataset={chartDataset} />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Dashboard;\n","import React from \"react\";\nimport \"./App.css\";\nimport Dashboard from \"./components/Dashboard\";\n\nfunction App() {\n  return (\n    <div className=\"main-wrap\">\n      <Dashboard />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"normalize.css\";\nimport \"./styles/index.scss\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}