{"version":3,"sources":["components/TeamsChart.tsx","../../src/chart.tsx","../../src/index.tsx"],"names":["TeamsChart","selectedArenaMatches","dataset","createTeamsDataSet","colorArray","labelArr","dataArr","winArr","teamCompArr","teamMMRArr","teamRatingArr","enemyPlayerNamesArr","ticksConf","color","font","size","family","stepSize","beginAtZero","options","maintainAspectRatio","responsive","scales","y","ticks","x","plugins","tooltip","callbacks","afterLabel","index","dataIndex","teamComp","teamMMR","teamRating","playerNames","separateNamesFromRealm","enemyPlayerNames","wins","matchCount","data","calcWinrate","min","max","average","realm","names","label","value","formattedValue","legend","display","labels","datasets","backgroundColor","borderColor","borderWidth","hoverOffset","sortableEntries","Object","values","sort","a","b","matchesPlayed","forEach","entry","teamName","enemyTeamComp","push","generateChartColors","length","interpolateTurbo","colorStart","colorEnd","useEndAsStart","className","ChartComponent","forwardRef","id","props","height","width","redraw","type","getDatasetAtEvent","getElementAtEvent","getElementsAtEvent","fallbackContent","rest","canvas","useRef","computedData","useMemo","merge","useState","chart","setChart","useImperativeHandle","renderChart","destroyChart","useEffect","setTimeout","newDataSets","newChartData","currentDataSets","assign","currentDataSet","find","d","newDataSet","updateChart","ref","onClick","e","intersect","role","Line","Bar","Radar","Doughnut","PolarArea","Bubble","Pie","Scatter","defaults","chartjs","Chart"],"mappings":"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","file":"static/js/8.55146216.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n  ColorRangeInfo,\n  DetailedTeamRatingObject,\n  ModdedArenaMatch,\n} from \"../Types/ArenaTypes\";\nimport generateChartColors from \"../utils/colorGeneration\";\nimport { interpolateTurbo } from \"d3-scale-chromatic\";\nimport { Bar } from \"react-chartjs-2/dist\";\nimport {\n  calcWinrate,\n  createTeamsDataSet,\n  separateNamesFromRealm,\n} from \"../utils/dataSetHelpers\";\n\nexport type teamsChartProps = {\n  selectedArenaMatches: ModdedArenaMatch[];\n};\n\nconst TeamsChart: React.FC<teamsChartProps> = ({ selectedArenaMatches }) => {\n  const dataset = createTeamsDataSet(selectedArenaMatches);\n  let colorArray: string[] = [];\n  const labelArr: (string | string[])[] = [];\n  const dataArr: number[] = [];\n  const winArr: number[] = [];\n  const teamCompArr: string[] = [];\n  const teamMMRArr: DetailedTeamRatingObject[] = [];\n  const teamRatingArr: DetailedTeamRatingObject[] = [];\n  const enemyPlayerNamesArr: string[][] = [];\n\n  const ticksConf = {\n    color: \"#292F36\",\n    font: { size: 15, family: \"'Roboto', sans-serif\" },\n    stepSize: 1,\n    beginAtZero: true,\n  };\n  const options: any = {\n    maintainAspectRatio: false,\n    // indexAxis: \"y\",\n    responsive: true,\n    scales: {\n      y: {\n        ticks: ticksConf,\n      },\n      x: {\n        ticks: ticksConf,\n      },\n    },\n    plugins: {\n      tooltip: {\n        callbacks: {\n          afterLabel: (tooltip: any) => {\n            const index = tooltip.dataIndex;\n            const dataset = tooltip.dataset;\n            const teamComp = dataset.teamComp[index];\n            const teamMMR = dataset.teamMMR[index];\n            const teamRating = dataset.teamRating[index];\n            const playerNames = separateNamesFromRealm(\n              dataset.enemyPlayerNames[index]\n            );\n            const wins = dataset.wins[index];\n            const matchCount = tooltip.dataset.data[index];\n            return [\n              teamComp,\n              `Wins: ${wins}, Losses: ${matchCount - wins}, WR: ${calcWinrate(\n                matchCount,\n                wins\n              )}%`,\n              `Their MMR - min: ${teamMMR.min} | max: ${teamMMR.max} | avg: ${teamMMR.average}`,\n              `Their Rating - min: ${teamRating.min} | max: ${teamRating.max} | avg: ${teamRating.average}`,\n              `Realm: ${playerNames.realm}`,\n              `Names: ${playerNames.names}`,\n            ];\n          },\n          label: (tooltip: any) => {\n            const value = tooltip.formattedValue;\n            return `Total: ${value}`;\n          },\n        },\n      },\n      legend: {\n        display: false,\n      },\n    },\n  };\n\n  const data = {\n    labels: labelArr,\n    datasets: [\n      {\n        label: \"\",\n        data: dataArr,\n        wins: winArr,\n        teamComp: teamCompArr,\n        teamMMR: teamMMRArr,\n        teamRating: teamRatingArr,\n        enemyPlayerNames: enemyPlayerNamesArr,\n        backgroundColor: colorArray,\n        borderColor: [],\n        borderWidth: 1,\n        hoverOffset: 6,\n      },\n    ],\n  };\n\n  const sortableEntries = Object.values(dataset);\n  sortableEntries.sort((a, b) => b.matchesPlayed - a.matchesPlayed);\n  sortableEntries.forEach((entry) => {\n    const {\n      teamName,\n      matchesPlayed,\n      wins,\n      enemyTeamComp,\n      teamRating,\n      teamMMR,\n      enemyPlayerNames,\n    } = entry;\n    labelArr.push(teamName);\n    dataArr.push(matchesPlayed);\n    winArr.push(wins);\n    teamCompArr.push(enemyTeamComp);\n    teamRatingArr.push(teamRating);\n    teamMMRArr.push(teamMMR);\n    enemyPlayerNamesArr.push(enemyPlayerNames);\n  });\n\n  const colorRangeInfo: ColorRangeInfo = {\n    colorStart: 0.1,\n    colorEnd: 0.85,\n    useEndAsStart: true,\n  };\n  generateChartColors(\n    sortableEntries.length,\n    interpolateTurbo,\n    colorRangeInfo,\n    colorArray\n  );\n\n  return (\n    <div className={\"team-chart-wrap\"}>\n      <div className=\"header\">\n        <h1 className=\"title\">{\"Enemy Team Stats\"}</h1>\n      </div>\n      <div className={\"chart-container\"}>\n        <Bar data={data} options={options} />\n      </div>\n    </div>\n  );\n};\n\nexport default TeamsChart;\n","import React, {\n  useEffect,\n  useState,\n  useRef,\n  useImperativeHandle,\n  useMemo,\n  forwardRef,\n} from 'react';\n// eslint-disable-next-line no-unused-vars\nimport { Props } from './types';\n\nimport Chart from 'chart.js/auto';\nimport type { ChartData } from 'chart.js';\n\nimport merge from 'lodash/merge';\nimport assign from 'lodash/assign';\nimport find from 'lodash/find';\n\nconst ChartComponent = forwardRef<Chart | undefined, Props>((props, ref) => {\n  const {\n    id,\n    className,\n    height = 150,\n    width = 300,\n    redraw = false,\n    type,\n    data,\n    options = {},\n    plugins = [],\n    getDatasetAtEvent,\n    getElementAtEvent,\n    getElementsAtEvent,\n    fallbackContent,\n    ...rest\n  } = props;\n\n  const canvas = useRef<HTMLCanvasElement>(null);\n\n  const computedData = useMemo<ChartData>(() => {\n    if (typeof data === 'function') {\n      return canvas.current ? data(canvas.current) : {};\n    } else return merge({}, data);\n  }, [data, canvas.current]);\n\n  const [chart, setChart] = useState<Chart>();\n\n  useImperativeHandle<Chart | undefined, Chart | undefined>(ref, () => chart, [\n    chart,\n  ]);\n\n  const renderChart = () => {\n    if (!canvas.current) return;\n\n    setChart(\n      new Chart(canvas.current, {\n        type,\n        data: computedData,\n        options,\n        plugins,\n      })\n    );\n  };\n\n  const onClick = (e: React.MouseEvent<HTMLCanvasElement>) => {\n    if (!chart) return;\n\n    getDatasetAtEvent &&\n      getDatasetAtEvent(\n        chart.getElementsAtEventForMode(\n          e as unknown as Event,\n          'dataset',\n          { intersect: true },\n          false\n        ),\n        e\n      );\n    getElementAtEvent &&\n      getElementAtEvent(\n        chart.getElementsAtEventForMode(\n          e as unknown as Event,\n          'nearest',\n          { intersect: true },\n          false\n        ),\n        e\n      );\n    getElementsAtEvent &&\n      getElementsAtEvent(\n        chart.getElementsAtEventForMode(\n          e as unknown as Event,\n          'index',\n          { intersect: true },\n          false\n        ),\n        e\n      );\n  };\n\n  const updateChart = () => {\n    if (!chart) return;\n\n    if (options) {\n      chart.options = { ...options };\n    }\n\n    if (!chart.config.data) {\n      chart.config.data = computedData;\n      chart.update();\n      return;\n    }\n\n    const { datasets: newDataSets = [], ...newChartData } = computedData;\n    const { datasets: currentDataSets = [] } = chart.config.data;\n\n    // copy values\n    assign(chart.config.data, newChartData);\n\n    chart.config.data.datasets = newDataSets.map((newDataSet: any) => {\n      // given the new set, find it's current match\n      const currentDataSet = find(\n        currentDataSets,\n        d => d.label === newDataSet.label && d.type === newDataSet.type\n      );\n\n      // There is no original to update, so simply add new one\n      if (!currentDataSet || !newDataSet.data) return { ...newDataSet };\n\n      if (!currentDataSet.data) {\n        currentDataSet.data = [];\n      } else {\n        currentDataSet.data.length = newDataSet.data.length;\n      }\n\n      // copy in values\n      assign(currentDataSet.data, newDataSet.data);\n\n      // apply dataset changes, but keep copied data\n      assign(currentDataSet, { ...newDataSet, data: currentDataSet.data });\n      return currentDataSet;\n    });\n\n    chart.update();\n  };\n\n  const destroyChart = () => {\n    if (chart) chart.destroy();\n  };\n\n  useEffect(() => {\n    renderChart();\n\n    return () => destroyChart();\n  }, []);\n\n  useEffect(() => {\n    if (redraw) {\n      destroyChart();\n      setTimeout(() => {\n        renderChart();\n      }, 0);\n    } else {\n      updateChart();\n    }\n  }, [props, computedData]);\n\n  return (\n    <canvas\n      {...rest}\n      height={height}\n      width={width}\n      ref={canvas}\n      id={id}\n      className={className}\n      onClick={onClick}\n      data-testid='canvas'\n      role='img'\n    >\n      {fallbackContent}\n    </canvas>\n  );\n});\n\nexport default ChartComponent;\n","import React, { forwardRef } from 'react';\n// eslint-disable-next-line no-unused-vars\nimport { Props } from './types';\nimport ChartComponent from './chart';\n// eslint-disable-next-line no-unused-vars\nimport Chart from 'chart.js/auto';\nimport * as chartjs from 'chart.js';\n\nexport const Line = forwardRef<Chart | undefined, Omit<Props, 'type'>>((props, ref) => (\n  <ChartComponent\n    {...props}\n    type='line'\n    ref={ref}\n    options={props.options || {}}\n  />\n));\n\nexport const Bar = forwardRef<Chart | undefined, Omit<Props, 'type'>>((props, ref) => (\n  <ChartComponent\n    {...props}\n    type='bar'\n    ref={ref}\n    options={props.options || {}}\n  />\n));\n\nexport const Radar = forwardRef<Chart | undefined, Omit<Props, 'type'>>((props, ref) => (\n  <ChartComponent\n    {...props}\n    type='radar'\n    ref={ref}\n    options={props.options || {}}\n  />\n));\n\nexport const Doughnut = forwardRef<Chart | undefined, Omit<Props, 'type'>>((props, ref) => (\n  <ChartComponent\n    {...props}\n    type='doughnut'\n    ref={ref}\n    options={props.options || {}}\n  />\n));\n\nexport const PolarArea = forwardRef<Chart | undefined, Omit<Props, 'type'>>((props, ref) => (\n  <ChartComponent\n    {...props}\n    type='polarArea'\n    ref={ref}\n    options={props.options || {}}\n  />\n));\n\nexport const Bubble = forwardRef<Chart | undefined, Omit<Props, 'type'>>((props, ref) => (\n  <ChartComponent\n    {...props}\n    type='bubble'\n    ref={ref}\n    options={props.options || {}}\n  />\n));\n\nexport const Pie = forwardRef<Chart | undefined, Omit<Props, 'type'>>((props, ref) => (\n  <ChartComponent\n    {...props}\n    type='pie'\n    ref={ref}\n    options={props.options || {}}\n  />\n));\n\nexport const Scatter = forwardRef<Chart | undefined, Omit<Props, 'type'>>((props, ref) => (\n  <ChartComponent\n    {...props}\n    type='scatter'\n    ref={ref}\n    options={props.options || {}}\n  />\n));\n\nexport const defaults = chartjs.defaults;\n\nexport const Chart = chartjs.Chart;\n\nexport default ChartComponent;\n"],"sourceRoot":""}