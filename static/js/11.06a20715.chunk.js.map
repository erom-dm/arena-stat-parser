{"version":3,"sources":["components/MatchupChart.tsx"],"names":["ticksConf","color","font","size","tickSize","isMobile","maxTicksLimitY","maxTicksLimitX","family","stepSize","beginAtZero","MatchupChart","selectedArenaMatches","useState","MatchupChartTypes","teamComps","chartType","setChartType","useMemo","createMatchupDataSet","teamCompsDataset","classDistributionDataset","getTeamCompsChartInputData","totalMatchNumber","totalWins","totalLosses","totalWinrate","labelArr","dataArr","winsArr","zoneStatsArr","performanceStatsArr","colorArray","getClassDistributionChartInputData","classLabels","labels","totalClassData","totalData","inMatchesClassData","inMatchesData","classColorArray","teamCompOptions","maintainAspectRatio","indexAxis","responsive","scales","y","ticks","x","plugins","tooltip","callbacks","afterLabel","formatTeamCompsChartTooltip","label","value","formattedValue","legend","display","teamCompData","datasets","data","wins","zoneStats","performanceStats","backgroundColor","borderColor","borderWidth","hoverOffset","classDistributionOptions","formatClassDistributionChartTooltip","classDistributionData","totalClassCount","reduce","prev","next","chartTitle","chartData","chartOptions","className","onClick","prevState","classes","options"],"mappings":"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","file":"static/js/11.06a20715.chunk.js","sourcesContent":["import React, { useMemo, useState } from \"react\";\r\nimport { Bar } from \"react-chartjs-2\";\r\nimport { isMobile } from \"react-device-detect\";\r\nimport {\r\n  TeamCompData,\r\n  MatchupChartTypes,\r\n  ModdedArenaMatch,\r\n  ClassDistributionData,\r\n} from \"../Types/ArenaTypes\";\r\nimport {\r\n  createMatchupDataSet,\r\n  formatClassDistributionChartTooltip,\r\n  formatTeamCompsChartTooltip,\r\n  getClassDistributionChartInputData,\r\n  getTeamCompsChartInputData,\r\n} from \"../utils/dataSetHelpers\";\r\n\r\nconst chartVars = {\r\n  tickSize: isMobile ? 12 : 15,\r\n  maxTicksLimitY: isMobile ? 8 : 15,\r\n  maxTicksLimitX: isMobile ? 10 : 20,\r\n};\r\n\r\nconst ticksConf = {\r\n  color: \"#292F36\",\r\n  font: { size: chartVars.tickSize, family: \"'Roboto', sans-serif\" },\r\n  stepSize: 1,\r\n  beginAtZero: true,\r\n};\r\n\r\ntype BarChartProps = {\r\n  selectedArenaMatches: ModdedArenaMatch[];\r\n};\r\n\r\nconst MatchupChart: React.FC<BarChartProps> = ({ selectedArenaMatches }) => {\r\n  const [chartType, setChartType] = useState<MatchupChartTypes>(\r\n    MatchupChartTypes.teamComps\r\n  );\r\n  const toggleChartType = () => {\r\n    setChartType((prevState) =>\r\n      prevState === MatchupChartTypes.classes\r\n        ? MatchupChartTypes.teamComps\r\n        : MatchupChartTypes.classes\r\n    );\r\n  };\r\n  const { teamCompsDataset, classDistributionDataset } = useMemo(\r\n    () => createMatchupDataSet(selectedArenaMatches),\r\n    [selectedArenaMatches]\r\n  );\r\n  const {\r\n    totalMatchNumber,\r\n    totalWins,\r\n    totalLosses,\r\n    totalWinrate,\r\n    labelArr,\r\n    dataArr,\r\n    winsArr,\r\n    zoneStatsArr,\r\n    performanceStatsArr,\r\n    colorArray,\r\n  } = useMemo(\r\n    () => getTeamCompsChartInputData(teamCompsDataset),\r\n    [teamCompsDataset]\r\n  );\r\n  const {\r\n    labels: classLabels,\r\n    totalData: totalClassData,\r\n    inMatchesData: inMatchesClassData,\r\n    colorArray: classColorArray,\r\n  } = useMemo(\r\n    () => getClassDistributionChartInputData(classDistributionDataset),\r\n    [classDistributionDataset]\r\n  );\r\n\r\n  const teamCompOptions: any = useMemo(\r\n    () => ({\r\n      maintainAspectRatio: false,\r\n      indexAxis: \"y\",\r\n      responsive: true,\r\n      scales: {\r\n        y: {\r\n          ticks: ticksConf,\r\n        },\r\n        x: {\r\n          ticks: ticksConf,\r\n        },\r\n      },\r\n      plugins: {\r\n        tooltip: {\r\n          callbacks: {\r\n            afterLabel: formatTeamCompsChartTooltip,\r\n            label: (tooltip: any) => {\r\n              const value = tooltip.formattedValue;\r\n              return `Total: ${value}`;\r\n            },\r\n          },\r\n        },\r\n        legend: {\r\n          display: false,\r\n        },\r\n      },\r\n    }),\r\n    []\r\n  );\r\n  const teamCompData: TeamCompData = useMemo(\r\n    () => ({\r\n      labels: labelArr,\r\n      datasets: [\r\n        {\r\n          label: \"\",\r\n          data: dataArr,\r\n          wins: winsArr,\r\n          zoneStats: zoneStatsArr,\r\n          performanceStats: performanceStatsArr,\r\n          backgroundColor: colorArray,\r\n          borderColor: [],\r\n          borderWidth: 1,\r\n          hoverOffset: 6,\r\n        },\r\n      ],\r\n    }),\r\n    [colorArray, dataArr, labelArr, performanceStatsArr, winsArr, zoneStatsArr]\r\n  );\r\n  const classDistributionOptions: any = useMemo(\r\n    () => ({\r\n      maintainAspectRatio: false,\r\n      indexAxis: \"y\",\r\n      responsive: true,\r\n      scales: {\r\n        y: {\r\n          ticks: ticksConf,\r\n        },\r\n        x: {\r\n          ticks: ticksConf,\r\n        },\r\n      },\r\n      plugins: {\r\n        tooltip: {\r\n          callbacks: {\r\n            afterLabel: formatClassDistributionChartTooltip,\r\n            label: (tooltip: any) => {\r\n              const value = tooltip.formattedValue;\r\n              return `Total: ${value}`;\r\n            },\r\n          },\r\n        },\r\n        legend: {\r\n          display: false,\r\n        },\r\n      },\r\n    }),\r\n    []\r\n  );\r\n  const classDistributionData: ClassDistributionData = useMemo(\r\n    () => ({\r\n      labels: classLabels,\r\n      datasets: [\r\n        {\r\n          label: \"\",\r\n          data: totalClassData,\r\n          inMatchesData: inMatchesClassData,\r\n          totalClassCount: totalClassData.reduce(\r\n            (prev, next) => prev + next,\r\n            0\r\n          ),\r\n          totalMatchNumber: totalMatchNumber,\r\n          backgroundColor: classColorArray,\r\n          borderColor: [],\r\n          borderWidth: 1,\r\n          hoverOffset: 6,\r\n        },\r\n      ],\r\n    }),\r\n    [\r\n      classLabels,\r\n      totalClassData,\r\n      inMatchesClassData,\r\n      totalMatchNumber,\r\n      classColorArray,\r\n    ]\r\n  );\r\n\r\n  const chartTitle: string = `Matches Played: ${totalMatchNumber}, Wins: ${totalWins}, Losses: ${totalLosses}, WR: ${totalWinrate}%,`;\r\n  const chartData =\r\n    chartType === MatchupChartTypes.teamComps\r\n      ? teamCompData\r\n      : classDistributionData;\r\n  const chartOptions =\r\n    chartType === MatchupChartTypes.teamComps\r\n      ? teamCompOptions\r\n      : classDistributionOptions;\r\n\r\n  return (\r\n    <div className={\"matchup-chart-wrap\"}>\r\n      <div className=\"header\">\r\n        <button onClick={toggleChartType}>{chartType}</button>\r\n        <h1 className=\"title\">{chartTitle}</h1>\r\n      </div>\r\n      <div className={\"chart-container\"}>\r\n        <Bar data={chartData} options={chartOptions} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MatchupChart;\r\n"],"sourceRoot":""}