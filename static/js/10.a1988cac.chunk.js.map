{"version":3,"sources":["components/ChartWrapper.tsx"],"names":["MatchupChart","React","lazy","LineChart","TeamsChart","MatchList","EmptyRoute","ChartWrapper","sessionData","sessionSelection","useState","selectedArenaMatches","setSelectedArenaMatches","Map","selectedSessions","setSelectedSessions","useEffect","size","includes","matchArrayFromSelectedSessions","selectedMatches","forEach","sessionKey","session","get","set","className","path","element","to","replace"],"mappings":"8LAIMA,EAAeC,IAAMC,MAAK,kBAAM,uDAChCC,EAAYF,IAAMC,MAAK,kBAAM,uDAC7BE,EAAaH,IAAMC,MAAK,kBAAM,uDAC9BG,EAAYJ,IAAMC,MAAK,kBAAM,kCAC7BI,EAAaL,IAAMC,MAAK,kBAAM,kCA2ErBK,UApEqC,SAAC,GAG9C,IAFLC,EAEI,EAFJA,YACAC,EACI,EADJA,iBACI,EACoDC,mBAEtD,IAHE,mBACGC,EADH,KACyBC,EADzB,OAI4CF,mBAC9C,IAAIG,KALF,mBAIGC,EAJH,KAIqBC,EAJrB,KA6BJ,OArBAC,qBAAU,WACR,UAAIR,QAAJ,IAAIA,OAAJ,EAAIA,EAAaS,KACf,GAAIR,EAAiBS,SAAS,GAC5BN,EAAwB,YACnBO,YAA+BX,KAEpCO,EAAoBP,OACf,CACL,IAAMY,EAAiC,IAAIP,IAC3CJ,EAAiBY,SAAQ,SAACC,GACxB,IAAMC,EAAUf,EAAYgB,IAAIF,GAChCC,GAAWH,EAAgBK,IAAIH,EAAYC,MAE7CX,EAAwB,YACnBO,YAA+BC,KAEpCL,EAAoBK,MAGvB,CAACZ,EAAaC,IAGf,qBAAKiB,UAAW,gBAAhB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CACEC,KAAM,IACNC,SACa,OAAXpB,QAAW,IAAXA,OAAA,EAAAA,EAAaS,MAAO,cAAC,IAAD,CAAUY,GAAG,WAAWC,SAAS,IAAW,OAGpE,cAAC,IAAD,CACEH,KAAM,WACNC,QAAS,cAACvB,EAAD,CAAWM,qBAAsBA,MAE5C,cAAC,IAAD,CACEgB,KAAM,cACNC,QAAS,cAAC5B,EAAD,CAAcW,qBAAsBA,MAE/C,cAAC,IAAD,CACEgB,KAAM,iBACNC,QACE,cAACzB,EAAD,CACEQ,qBAAsBA,EACtBG,iBAAkBA,MAIxB,cAAC,IAAD,CACEa,KAAM,SACNC,QAAS,cAACxB,EAAD,CAAYO,qBAAsBA,MAE7C,cAAC,IAAD,CAAOgB,KAAM,IAAKC,QAAS,cAACtB,EAAD","file":"static/js/10.a1988cac.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { MatchSessions, ModdedArenaMatch } from \"../Types/ArenaTypes\";\nimport { Routes, Route, Navigate } from \"react-router-dom\";\nimport { matchArrayFromSelectedSessions } from \"../utils/dataSetHelpers\";\nconst MatchupChart = React.lazy(() => import(\"./MatchupChart\"));\nconst LineChart = React.lazy(() => import(\"./LineChart\"));\nconst TeamsChart = React.lazy(() => import(\"./TeamsChart\"));\nconst MatchList = React.lazy(() => import(\"./MatchList\"));\nconst EmptyRoute = React.lazy(() => import(\"./EmptyRoute\"));\n\nexport type chartContainerProps = {\n  sessionData: MatchSessions;\n  sessionSelection: number[];\n};\n\nconst ChartWrapper: React.FC<chartContainerProps> = ({\n  sessionData,\n  sessionSelection,\n}) => {\n  const [selectedArenaMatches, setSelectedArenaMatches] = useState<\n    ModdedArenaMatch[]\n  >([]);\n  const [selectedSessions, setSelectedSessions] = useState<MatchSessions>(\n    new Map()\n  );\n\n  useEffect(() => {\n    if (sessionData?.size) {\n      if (sessionSelection.includes(0)) {\n        setSelectedArenaMatches([\n          ...matchArrayFromSelectedSessions(sessionData),\n        ]);\n        setSelectedSessions(sessionData);\n      } else {\n        const selectedMatches: MatchSessions = new Map();\n        sessionSelection.forEach((sessionKey) => {\n          const session = sessionData.get(sessionKey);\n          session && selectedMatches.set(sessionKey, session);\n        });\n        setSelectedArenaMatches([\n          ...matchArrayFromSelectedSessions(selectedMatches),\n        ]);\n        setSelectedSessions(selectedMatches);\n      }\n    }\n  }, [sessionData, sessionSelection]);\n\n  return (\n    <div className={\"chart-wrapper\"}>\n      <Routes>\n        <Route\n          path={\"/\"}\n          element={\n            sessionData?.size ? <Navigate to=\"/matches\" replace={true} /> : null\n          }\n        />\n        <Route\n          path={\"/matches\"}\n          element={<MatchList selectedArenaMatches={selectedArenaMatches} />}\n        />\n        <Route\n          path={\"/team-comps\"}\n          element={<MatchupChart selectedArenaMatches={selectedArenaMatches} />}\n        />\n        <Route\n          path={\"/rating-change\"}\n          element={\n            <LineChart\n              selectedArenaMatches={selectedArenaMatches}\n              selectedSessions={selectedSessions}\n            />\n          }\n        />\n        <Route\n          path={\"/teams\"}\n          element={<TeamsChart selectedArenaMatches={selectedArenaMatches} />}\n        />\n        <Route path={\"*\"} element={<EmptyRoute />} />\n      </Routes>\n    </div>\n  );\n};\n\nexport default ChartWrapper;\n"],"sourceRoot":""}