{"version":3,"sources":["../../src/chart.tsx","../../src/index.tsx","components/TeamsChart.tsx"],"names":["ChartComponent","forwardRef","id","props","className","height","width","redraw","type","data","options","plugins","getDatasetAtEvent","getElementAtEvent","getElementsAtEvent","fallbackContent","rest","canvas","useRef","computedData","useMemo","merge","useState","chart","setChart","useImperativeHandle","renderChart","destroyChart","useEffect","setTimeout","datasets","newDataSets","newChartData","currentDataSets","assign","currentDataSet","find","d","newDataSet","updateChart","ref","onClick","e","intersect","role","Line","Bar","Radar","Doughnut","PolarArea","Bubble","Pie","Scatter","defaults","chartjs","Chart","TeamsChart","selectedArenaMatches","dataset","createTeamsDataSet","colorArray","labelArr","dataArr","winArr","teamCompArr","teamMMRArr","teamRatingArr","enemyPlayerNamesArr","ticksConf","color","font","size","family","stepSize","beginAtZero","maintainAspectRatio","responsive","scales","y","ticks","x","tooltip","callbacks","afterLabel","index","dataIndex","teamComp","teamMMR","teamRating","playerNames","separateNamesFromRealm","enemyPlayerNames","wins","matchCount","calcWinrate","min","max","average","realm","names","label","value","formattedValue","legend","display","labels","backgroundColor","borderColor","borderWidth","hoverOffset","sortableEntries","Object","values","sort","a","b","matchesPlayed","forEach","entry","teamName","enemyTeamComp","push","generateChartColors","length","interpolateTurbo","colorStart","colorEnd","useEndAsStart"],"mappings":"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","file":"static/js/7.8c73dd7c.chunk.js","sourcesContent":["import React, {\n  useEffect,\n  useState,\n  useRef,\n  useImperativeHandle,\n  useMemo,\n  forwardRef,\n} from 'react';\n// eslint-disable-next-line no-unused-vars\nimport { Props } from './types';\n\nimport Chart from 'chart.js/auto';\nimport type { ChartData } from 'chart.js';\n\nimport merge from 'lodash/merge';\nimport assign from 'lodash/assign';\nimport find from 'lodash/find';\n\nconst ChartComponent = forwardRef<Chart | undefined, Props>((props, ref) => {\n  const {\n    id,\n    className,\n    height = 150,\n    width = 300,\n    redraw = false,\n    type,\n    data,\n    options = {},\n    plugins = [],\n    getDatasetAtEvent,\n    getElementAtEvent,\n    getElementsAtEvent,\n    fallbackContent,\n    ...rest\n  } = props;\n\n  const canvas = useRef<HTMLCanvasElement>(null);\n\n  const computedData = useMemo<ChartData>(() => {\n    if (typeof data === 'function') {\n      return canvas.current ? data(canvas.current) : {};\n    } else return merge({}, data);\n  }, [data, canvas.current]);\n\n  const [chart, setChart] = useState<Chart>();\n\n  useImperativeHandle<Chart | undefined, Chart | undefined>(ref, () => chart, [\n    chart,\n  ]);\n\n  const renderChart = () => {\n    if (!canvas.current) return;\n\n    setChart(\n      new Chart(canvas.current, {\n        type,\n        data: computedData,\n        options,\n        plugins,\n      })\n    );\n  };\n\n  const onClick = (e: React.MouseEvent<HTMLCanvasElement>) => {\n    if (!chart) return;\n\n    getDatasetAtEvent &&\n      getDatasetAtEvent(\n        chart.getElementsAtEventForMode(\n          e as unknown as Event,\n          'dataset',\n          { intersect: true },\n          false\n        ),\n        e\n      );\n    getElementAtEvent &&\n      getElementAtEvent(\n        chart.getElementsAtEventForMode(\n          e as unknown as Event,\n          'nearest',\n          { intersect: true },\n          false\n        ),\n        e\n      );\n    getElementsAtEvent &&\n      getElementsAtEvent(\n        chart.getElementsAtEventForMode(\n          e as unknown as Event,\n          'index',\n          { intersect: true },\n          false\n        ),\n        e\n      );\n  };\n\n  const updateChart = () => {\n    if (!chart) return;\n\n    if (options) {\n      chart.options = { ...options };\n    }\n\n    if (!chart.config.data) {\n      chart.config.data = computedData;\n      chart.update();\n      return;\n    }\n\n    const { datasets: newDataSets = [], ...newChartData } = computedData;\n    const { datasets: currentDataSets = [] } = chart.config.data;\n\n    // copy values\n    assign(chart.config.data, newChartData);\n\n    chart.config.data.datasets = newDataSets.map((newDataSet: any) => {\n      // given the new set, find it's current match\n      const currentDataSet = find(\n        currentDataSets,\n        d => d.label === newDataSet.label && d.type === newDataSet.type\n      );\n\n      // There is no original to update, so simply add new one\n      if (!currentDataSet || !newDataSet.data) return { ...newDataSet };\n\n      if (!currentDataSet.data) {\n        currentDataSet.data = [];\n      } else {\n        currentDataSet.data.length = newDataSet.data.length;\n      }\n\n      // copy in values\n      assign(currentDataSet.data, newDataSet.data);\n\n      // apply dataset changes, but keep copied data\n      assign(currentDataSet, { ...newDataSet, data: currentDataSet.data });\n      return currentDataSet;\n    });\n\n    chart.update();\n  };\n\n  const destroyChart = () => {\n    if (chart) chart.destroy();\n  };\n\n  useEffect(() => {\n    renderChart();\n\n    return () => destroyChart();\n  }, []);\n\n  useEffect(() => {\n    if (redraw) {\n      destroyChart();\n      setTimeout(() => {\n        renderChart();\n      }, 0);\n    } else {\n      updateChart();\n    }\n  }, [props, computedData]);\n\n  return (\n    <canvas\n      {...rest}\n      height={height}\n      width={width}\n      ref={canvas}\n      id={id}\n      className={className}\n      onClick={onClick}\n      data-testid='canvas'\n      role='img'\n    >\n      {fallbackContent}\n    </canvas>\n  );\n});\n\nexport default ChartComponent;\n","import React, { forwardRef } from 'react';\n// eslint-disable-next-line no-unused-vars\nimport { Props } from './types';\nimport ChartComponent from './chart';\n// eslint-disable-next-line no-unused-vars\nimport Chart from 'chart.js/auto';\nimport * as chartjs from 'chart.js';\n\nexport const Line = forwardRef<Chart | undefined, Omit<Props, 'type'>>((props, ref) => (\n  <ChartComponent\n    {...props}\n    type='line'\n    ref={ref}\n    options={props.options || {}}\n  />\n));\n\nexport const Bar = forwardRef<Chart | undefined, Omit<Props, 'type'>>((props, ref) => (\n  <ChartComponent\n    {...props}\n    type='bar'\n    ref={ref}\n    options={props.options || {}}\n  />\n));\n\nexport const Radar = forwardRef<Chart | undefined, Omit<Props, 'type'>>((props, ref) => (\n  <ChartComponent\n    {...props}\n    type='radar'\n    ref={ref}\n    options={props.options || {}}\n  />\n));\n\nexport const Doughnut = forwardRef<Chart | undefined, Omit<Props, 'type'>>((props, ref) => (\n  <ChartComponent\n    {...props}\n    type='doughnut'\n    ref={ref}\n    options={props.options || {}}\n  />\n));\n\nexport const PolarArea = forwardRef<Chart | undefined, Omit<Props, 'type'>>((props, ref) => (\n  <ChartComponent\n    {...props}\n    type='polarArea'\n    ref={ref}\n    options={props.options || {}}\n  />\n));\n\nexport const Bubble = forwardRef<Chart | undefined, Omit<Props, 'type'>>((props, ref) => (\n  <ChartComponent\n    {...props}\n    type='bubble'\n    ref={ref}\n    options={props.options || {}}\n  />\n));\n\nexport const Pie = forwardRef<Chart | undefined, Omit<Props, 'type'>>((props, ref) => (\n  <ChartComponent\n    {...props}\n    type='pie'\n    ref={ref}\n    options={props.options || {}}\n  />\n));\n\nexport const Scatter = forwardRef<Chart | undefined, Omit<Props, 'type'>>((props, ref) => (\n  <ChartComponent\n    {...props}\n    type='scatter'\n    ref={ref}\n    options={props.options || {}}\n  />\n));\n\nexport const defaults = chartjs.defaults;\n\nexport const Chart = chartjs.Chart;\n\nexport default ChartComponent;\n","import React from \"react\";\r\nimport {\r\n  ColorRangeInfo,\r\n  DetailedTeamRatingObject,\r\n  ModdedArenaMatch,\r\n} from \"../Types/ArenaTypes\";\r\nimport generateChartColors from \"../utils/colorGeneration\";\r\nimport { interpolateTurbo } from \"d3-scale-chromatic\";\r\nimport { Bar } from \"react-chartjs-2/dist\";\r\nimport {\r\n  calcWinrate,\r\n  createTeamsDataSet,\r\n  separateNamesFromRealm,\r\n} from \"../utils/dataSetHelpers\";\r\n\r\nexport type teamsChartProps = {\r\n  selectedArenaMatches: ModdedArenaMatch[];\r\n};\r\n\r\nconst TeamsChart: React.FC<teamsChartProps> = ({ selectedArenaMatches }) => {\r\n  const dataset = createTeamsDataSet(selectedArenaMatches);\r\n  let colorArray: string[] = [];\r\n  const labelArr: (string | string[])[] = [];\r\n  const dataArr: number[] = [];\r\n  const winArr: number[] = [];\r\n  const teamCompArr: string[] = [];\r\n  const teamMMRArr: DetailedTeamRatingObject[] = [];\r\n  const teamRatingArr: DetailedTeamRatingObject[] = [];\r\n  const enemyPlayerNamesArr: string[][] = [];\r\n\r\n  const ticksConf = {\r\n    color: \"#292F36\",\r\n    font: { size: 15, family: \"'Roboto', sans-serif\" },\r\n    stepSize: 1,\r\n    beginAtZero: true,\r\n  };\r\n  const options: any = {\r\n    maintainAspectRatio: false,\r\n    // indexAxis: \"y\",\r\n    responsive: true,\r\n    scales: {\r\n      y: {\r\n        ticks: ticksConf,\r\n      },\r\n      x: {\r\n        ticks: ticksConf,\r\n      },\r\n    },\r\n    plugins: {\r\n      tooltip: {\r\n        callbacks: {\r\n          afterLabel: (tooltip: any) => {\r\n            const index = tooltip.dataIndex;\r\n            const dataset = tooltip.dataset;\r\n            const teamComp = dataset.teamComp[index];\r\n            const teamMMR = dataset.teamMMR[index];\r\n            const teamRating = dataset.teamRating[index];\r\n            const playerNames = separateNamesFromRealm(\r\n              dataset.enemyPlayerNames[index]\r\n            );\r\n            const wins = dataset.wins[index];\r\n            const matchCount = tooltip.dataset.data[index];\r\n            return [\r\n              teamComp,\r\n              `Wins: ${wins}, Losses: ${matchCount - wins}, WR: ${calcWinrate(\r\n                matchCount,\r\n                wins\r\n              )}%`,\r\n              `Their MMR - min: ${teamMMR.min} | max: ${teamMMR.max} | avg: ${teamMMR.average}`,\r\n              `Their Rating - min: ${teamRating.min} | max: ${teamRating.max} | avg: ${teamRating.average}`,\r\n              `Realm: ${playerNames.realm}`,\r\n              `Names: ${playerNames.names}`,\r\n            ];\r\n          },\r\n          label: (tooltip: any) => {\r\n            const value = tooltip.formattedValue;\r\n            return `Total: ${value}`;\r\n          },\r\n        },\r\n      },\r\n      legend: {\r\n        display: false,\r\n      },\r\n    },\r\n  };\r\n\r\n  const data = {\r\n    labels: labelArr,\r\n    datasets: [\r\n      {\r\n        label: \"\",\r\n        data: dataArr,\r\n        wins: winArr,\r\n        teamComp: teamCompArr,\r\n        teamMMR: teamMMRArr,\r\n        teamRating: teamRatingArr,\r\n        enemyPlayerNames: enemyPlayerNamesArr,\r\n        backgroundColor: colorArray,\r\n        borderColor: [],\r\n        borderWidth: 1,\r\n        hoverOffset: 6,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const sortableEntries = Object.values(dataset);\r\n  sortableEntries.sort((a, b) => b.matchesPlayed - a.matchesPlayed);\r\n  sortableEntries.forEach((entry) => {\r\n    const {\r\n      teamName,\r\n      matchesPlayed,\r\n      wins,\r\n      enemyTeamComp,\r\n      teamRating,\r\n      teamMMR,\r\n      enemyPlayerNames,\r\n    } = entry;\r\n    labelArr.push(teamName);\r\n    dataArr.push(matchesPlayed);\r\n    winArr.push(wins);\r\n    teamCompArr.push(enemyTeamComp);\r\n    teamRatingArr.push(teamRating);\r\n    teamMMRArr.push(teamMMR);\r\n    enemyPlayerNamesArr.push(enemyPlayerNames);\r\n  });\r\n\r\n  const colorRangeInfo: ColorRangeInfo = {\r\n    colorStart: 0.05,\r\n    colorEnd: 0.87,\r\n    useEndAsStart: true,\r\n  };\r\n  generateChartColors(\r\n    sortableEntries.length,\r\n    interpolateTurbo,\r\n    colorRangeInfo,\r\n    colorArray\r\n  );\r\n\r\n  return (\r\n    <div className={\"team-chart-wrap\"}>\r\n      <div className=\"header\">\r\n        <div />\r\n        <h1 className=\"title\">{\"Enemy Team Stats\"}</h1>\r\n      </div>\r\n      <div className={\"chart-container\"}>\r\n        <Bar data={data} options={options} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TeamsChart;\r\n"],"sourceRoot":""}