{"version":3,"sources":["components/LineChart.tsx"],"names":["LineChart","selectedArenaMatches","selectedSessions","useState","LineChartTypes","perMatch","chartType","setChartType","matchDataset","useMemo","createMatchRatingChangeDataSet","sessionDataset","createSessionRatingChangeDataSet","getLineChartInputData","teamRatingArr","teamMMRArr","enemyTeamCompArr","labelArr","winArray","teamRatingArrPerSession","labelArrPerSession","sessionDates","Array","from","keys","map","timestamp","dayjs","unix","format","chartVars","tickSize","isMobile","maxTicksLimitY","maxTicksLimitX","ticksConf","color","font","size","family","stepSize","beginAtZero","perMatchOptions","maintainAspectRatio","scales","ticks","autoSkip","maxTicksLimit","bounds","grid","borderDashOffset","x","plugins","legend","rtl","labels","tooltip","callbacks","afterLabel","index","dataIndex","enemyComp","dataset","win","perMatchData","datasets","label","data","fill","backgroundColor","borderColor","yAxisID","perSessionOptions","console","dir","rating","dateString","title","perSessionData","propObject","options","className","onClick","prevState","perSession"],"mappings":"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","file":"static/js/9.7b680b7f.chunk.js","sourcesContent":["import React, { useMemo, useState } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport {\r\n  LineChartTypes,\r\n  MatchSessions,\r\n  ModdedArenaMatch,\r\n} from \"../Types/ArenaTypes\";\r\nimport {\r\n  createMatchRatingChangeDataSet,\r\n  createSessionRatingChangeDataSet,\r\n  getLineChartInputData,\r\n} from \"../utils/dataSetHelpers\";\r\nimport dayjs from \"dayjs\";\r\nimport { isMobile } from \"react-device-detect\";\r\n\r\ntype LineChartProps = {\r\n  selectedArenaMatches: ModdedArenaMatch[];\r\n  selectedSessions: MatchSessions;\r\n};\r\n\r\nconst LineChart: React.FC<LineChartProps> = ({\r\n  selectedArenaMatches,\r\n  selectedSessions,\r\n}) => {\r\n  const [chartType, setChartType] = useState<LineChartTypes>(\r\n    LineChartTypes.perMatch\r\n  );\r\n  const toggleChartType = () => {\r\n    setChartType((prevState) =>\r\n      prevState === LineChartTypes.perMatch\r\n        ? LineChartTypes.perSession\r\n        : LineChartTypes.perMatch\r\n    );\r\n  };\r\n  const matchDataset = useMemo(\r\n    () => createMatchRatingChangeDataSet(selectedArenaMatches),\r\n    [selectedArenaMatches]\r\n  );\r\n  const sessionDataset = useMemo(\r\n    () => createSessionRatingChangeDataSet(selectedSessions),\r\n    [selectedSessions]\r\n  );\r\n  const { teamRatingArr, teamMMRArr, enemyTeamCompArr, labelArr, winArray } =\r\n    useMemo(() => getLineChartInputData(matchDataset), [matchDataset]);\r\n  const {\r\n    teamRatingArr: teamRatingArrPerSession,\r\n    labelArr: labelArrPerSession,\r\n  } = useMemo(() => getLineChartInputData(sessionDataset), [sessionDataset]);\r\n  const sessionDates = useMemo(\r\n    () =>\r\n      Array.from(selectedSessions.keys()).map((timestamp) =>\r\n        dayjs.unix(timestamp).format(\"DD/MM/YY\")\r\n      ),\r\n    [selectedSessions]\r\n  );\r\n\r\n  const chartVars = useMemo(\r\n    () => ({\r\n      tickSize: isMobile ? 12 : 15,\r\n      maxTicksLimitY: isMobile ? 8 : 15,\r\n      maxTicksLimitX: isMobile ? 10 : 20,\r\n    }),\r\n    []\r\n  );\r\n\r\n  const ticksConf = {\r\n    color: \"#292F36\",\r\n    font: { size: chartVars.tickSize, family: \"'Roboto', sans-serif\" },\r\n    stepSize: 1,\r\n    beginAtZero: true,\r\n  };\r\n\r\n  const perMatchOptions = {\r\n    maintainAspectRatio: false,\r\n    scales: {\r\n      \"y-axis-1\": {\r\n        ticks: {\r\n          ...ticksConf,\r\n          autoSkip: true,\r\n          maxTicksLimit: chartVars.maxTicksLimitY,\r\n        },\r\n        bounds: \"ticks\",\r\n        grid: { borderDashOffset: 0.9 },\r\n      },\r\n      x: {\r\n        ticks: {\r\n          ...ticksConf,\r\n          autoSkip: true,\r\n          maxTicksLimit: chartVars.maxTicksLimitX,\r\n        },\r\n      },\r\n    },\r\n    plugins: {\r\n      legend: {\r\n        rtl: false,\r\n        labels: {\r\n          font: { size: chartVars.tickSize, family: \"'Roboto', sans-serif\" },\r\n          color: \"#292F36\",\r\n        },\r\n      },\r\n      tooltip: {\r\n        callbacks: {\r\n          afterLabel: (tooltip: any) => {\r\n            const index = tooltip.dataIndex;\r\n            const enemyComp = tooltip.dataset.enemyComp[index];\r\n            const win = tooltip.dataset.win[index];\r\n            return [enemyComp, `${win ? \"Win\" : \"Loss\"}`];\r\n          },\r\n        },\r\n      },\r\n    },\r\n  };\r\n  const perMatchData = {\r\n    labels: labelArr,\r\n    datasets: [\r\n      {\r\n        label: \"New Team Rating\",\r\n        data: teamRatingArr,\r\n        enemyComp: enemyTeamCompArr,\r\n        win: winArray,\r\n        fill: false,\r\n        backgroundColor: \"rgb(254,38,0)\",\r\n        borderColor: \"rgb(254,131,0)\",\r\n        yAxisID: \"y-axis-1\",\r\n      },\r\n      {\r\n        label: \"MMR\",\r\n        data: teamMMRArr,\r\n        enemyComp: enemyTeamCompArr,\r\n        win: winArray,\r\n        fill: false,\r\n        backgroundColor: \"rgb(0,196,255)\",\r\n        borderColor: \"rgb(0,255,255)\",\r\n        yAxisID: \"y-axis-1\",\r\n      },\r\n    ],\r\n  };\r\n  const perSessionOptions = {\r\n    ...perMatchOptions,\r\n    plugins: {\r\n      tooltip: {\r\n        callbacks: {\r\n          afterLabel: (tooltip: any) => {\r\n            console.dir(tooltip);\r\n            const index = tooltip.dataIndex;\r\n            const rating = tooltip.dataset.data[index];\r\n            const dateString = tooltip.dataset.sessionDates[index];\r\n            return [\r\n              `Session #${index + 1} - ${dateString}`,\r\n              `Final session rating: ${rating}`,\r\n            ];\r\n          },\r\n          title: () => \"\",\r\n          label: () => \"\",\r\n        },\r\n      },\r\n    },\r\n  };\r\n  const perSessionData = {\r\n    labels: labelArrPerSession,\r\n    datasets: [\r\n      {\r\n        label: \"Session end team rating\",\r\n        data: teamRatingArrPerSession,\r\n        sessionDates: sessionDates,\r\n        fill: false,\r\n        backgroundColor: \"rgb(254,38,0)\",\r\n        borderColor: \"rgb(254,131,0)\",\r\n        yAxisID: \"y-axis-1\",\r\n      },\r\n    ],\r\n  };\r\n\r\n  const propObject =\r\n    chartType === LineChartTypes.perMatch\r\n      ? {\r\n          data: perMatchData,\r\n          options: perMatchOptions,\r\n        }\r\n      : {\r\n          data: perSessionData,\r\n          options: perSessionOptions,\r\n        };\r\n\r\n  return (\r\n    <div className={\"line-chart-wrap\"}>\r\n      <div className=\"header\">\r\n        <button onClick={toggleChartType}>{chartType}</button>\r\n        <h1 className=\"title\">Team Rating Change</h1>\r\n      </div>\r\n      <div className={\"chart-container\"}>\r\n        <Line data={propObject.data} options={propObject.options} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LineChart;\r\n"],"sourceRoot":""}