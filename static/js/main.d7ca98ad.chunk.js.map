{"version":3,"sources":["utils/stateManagement.tsx","utils/dataSetHelpers.tsx","components/UploadArea.tsx","utils/ArrayBuffer-StringHelper.tsx","utils/parseData.tsx","utils/colorGeneration.tsx","components/BarChart.tsx","utils/sessionManagement.tsx","components/SessionSelect.tsx","components/TeamSelect.tsx","components/Dashboard.tsx","utils/teamManagement.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["INSTANCE_DATA","setLocalStorageField","key","data","localStorage","setItem","JSON","stringify","DISCONNECTED","DC_TEAM_NAME","ARENA_INSTANCE_IDS","PLAYER_KEYS","getModdedArenaMatches","modifiedData","forEach","match","moddedMatch","enteredTime","instanceID","instanceName","playerName","enemyTeamComp","myTeamComp","myTeamName","bracket","myTeam","enemyTeam","win","moddedMatchData","myCharName","goldTeam","hasOwnProperty","teamName","purpleTeam","winningFaction","myTeamNames","Object","keys","enemyTeamNames","myTeamPlayerCount","length","enemyTeamPlayerCount","Math","max","arenaBracket","i","push","fillNameArraysWithBlanks","myModdedTeam","enemyModdedTeam","name","idx","getModdedTeamsAndTeamComps","sort","getModdedArenaData","assign","player1","teamMMR","matchArrayFromSelectedSessions","sessionData","filteredMatches","session","teamObj","moddedTeamObj","compArr","playerDCed","class","fillTeamCompObject","obj","matchCount","wins","Number","UploadArea","localStoreChangeHandler","localStorageChangeValue","useState","text","setText","onDrop","useCallback","acceptedFiles","file","reader","FileReader","onabort","onerror","onload","buf","binaryStr","result","filteredData","state","window","getItem","parsedState","parse","mergedState","filteredState","Map","map","item","values","mergeState","start","lastIndexOf","newStr","slice","enumRegexp","RegExp","instanceDataArray","replaceAll","split","parsedData","el","e","parseData","TextDecoder","decode","Uint8Array","filter","includes","readAsArrayBuffer","useDropzone","getRootProps","getInputProps","className","calculatePoint","index","intervalSize","colorRangeInfo","colorStart","colorEnd","useEndAsStart","calcWinrate","toFixed","BarChart","totalLosses","totalWinrate","dataset","totalMatchNumber","totalWins","labelArr","dataArr","winsArr","colorArray","options","indexAxis","responsive","scales","y","ticks","color","font","size","family","stepSize","beginAtZero","plugins","tooltip","callbacks","afterLabel","dataIndex","winrate","legend","display","labels","datasets","label","backgroundColor","borderColor","borderWidth","hoverOffset","datasetKeys","getOwnPropertyNames","sortableEntries","teamComp","a","b","entry","dataLength","colorScale","targetArray","colorPoint","generateChartColors","interpolateTurbo","chartTitle","dayjs","extend","isBetween","SessionSelect","onChange","selectAllOption","value","selected","setSelected","valueRef","useRef","current","useEffect","overlap","sessionDataKeys","val","sessionKeys","formattedData","unix","format","sessionOption","reverse","isSelectAllSelected","classNamePrefix","defaultValue","isOptionSelected","option","some","newValue","actionMeta","selectedTimestampArray","action","removedValue","filteredOptions","hideSelectedOptions","closeMenuOnSelect","isMulti","TeamSelect","teams","team","Dashboard","setModdedMatchData","myTeams","setMyTeams","myTeamSelection","setMyTeamSelection","setSessionData","sessionSelection","setSessionSelection","localStorageChanged","setLocalStorageChanged","chartDataset","setChartDataset","matches","localStorageMatchState","Set","selectedTeam","filteredMatchData","matchSessions","prevMatch","sessionKey","every","prevMatchEnterTime","add","get","set","getSessions","selectedSessionData","selectedMatches","hasDCedPlayers","enemyTeamCompString","reduce","concat","createBasicChartDataset","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+NAGaA,EAAgB,eA6BtB,SAASC,EAAqBC,EAAaC,GAChDC,aAAaC,QAAQH,EAAKI,KAAKC,UAAUJ,ICvB3C,IAAMK,EAAe,gBACfC,EAAe,OACfC,EAA+B,CAAC,IAAK,IAAK,KAC1CC,EAAiC,CACrC,UACA,UACA,UACA,UACA,WAYK,SAASC,EAAsBT,GACpC,IAAMU,EAAmC,GA6BzC,OA5BAV,EAAKW,SAAQ,SAACC,GAAW,IAAD,IAChBC,EAAgC,CACpCC,YAAaF,EAAME,YACnBC,WAAYH,EAAMG,WAClBC,aAAcJ,EAAMI,aACpBC,WAAYL,EAAMK,WAClBC,cAAe,GACfC,WAAY,GACZC,WAAY,GACZC,QAAS,EACTC,OAAQ,GACRC,UAAW,GACXC,KAAK,GAGDC,EAsCV,SAA4Bb,GAC1B,IAAIU,EAAmBC,EAAsBC,EAAcJ,EACrDM,EAAad,EAAMK,WACrBL,EAAMe,SAASC,eAAeF,IAChCJ,EAASV,EAAMe,SACfP,EAAaR,EAAMe,SAASD,GAAYG,SACxCN,EAAYX,EAAMkB,WAClBN,IAAQZ,EAAMmB,iBAEdT,EAASV,EAAMkB,WACfV,EAAaR,EAAMkB,WAAWJ,GAAYG,SAC1CN,EAAYX,EAAMe,SAClBH,GAAOZ,EAAMmB,gBAGf,IAAMC,EAAwBC,OAAOC,KAAKZ,GACpCa,EAA2BF,OAAOC,KAAKX,GACvCa,EAAoBJ,EAAYK,OAChCC,EAAuBH,EAAeE,OACtChB,EAAUkB,KAAKC,IAAIJ,EAAmBE,IAgD9C,SACEN,EACAG,EACAM,GAEA,GAAIT,EAAYK,OAASI,EACvB,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAeT,EAAYK,OAAQK,IACrDV,EAAYW,KAAKrC,GAGrB,GAAI6B,EAAeE,OAASI,EAC1B,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAeN,EAAeE,OAAQK,IACxDP,EAAeQ,KAAKrC,GA3DxBsC,CAAyBZ,EAAaG,EAAgBd,GAGtD,IAAIwB,EAAgC,GAChC1B,EAAuB,GACvB2B,EAAmC,GACnC5B,EAA0B,GAa9B,OAZAc,EAAYrB,SAAQ,SAACoC,EAAMC,GAAP,OAClBC,EAA2BF,EAAMC,EAAK1B,EAAQuB,EAAc1B,MAE9DgB,EAAexB,SAAQ,SAACoC,EAAMC,GAAP,OACrBC,EACEF,EACAC,EACAzB,EACAuB,EACA5B,MAGG,CACLG,UACAG,MACAJ,aACAE,OAAQuB,EACR1B,WAAYA,EAAW+B,OACvB3B,UAAWuB,EACX5B,cAAeA,EAAcgC,QApFLC,CAAmBvC,GAC3CqB,OAAOmB,OAAOvC,EAAaY,GAKiB,KAAxC,UAAAZ,EAAYS,OAAO+B,eAAnB,eAA4BC,UACe,KAA3C,UAAAzC,EAAYU,UAAU8B,eAAtB,eAA+BC,UAGjC5C,EAAaiC,KAAK9B,MAGfH,EAaF,SAAS6C,EACdC,GAEA,IAAMC,EAAsC,GAM5C,OAJAD,EAAY7C,SAAQ,SAAC+C,GACnBD,EAAgBd,KAAhB,MAAAc,EAAe,YAASC,OAGnBD,EAqDT,SAASR,EACPF,EACAC,EACAW,EACAC,EACAC,GAEA,IAAMC,EAAaf,IAASzC,EAC5BsD,EAAcpD,EAAYwC,IAAQc,EAC9B,KADwC,aAGtCf,KAAMA,GACHY,EAAQZ,IAEjBc,EAAQlB,KAAKmB,EAAazD,EAAesD,EAAQZ,GAAMgB,OAuCzD,SAASC,EACPC,EACAlE,EACAa,GAEIqD,EAAIlE,IACNkE,EAAIlE,GAAKmE,YAAc,EACvBtD,EAAMY,KAAOyC,EAAIlE,GAAKoE,QAEtBF,EAAIlE,GAAO,CAAEmE,WAAY,EAAGC,KAAMC,OAAOxD,EAAMY,M,WCvJpC6C,EAlC4B,SAAC,GAGrC,IAFLC,EAEI,EAFJA,wBACAC,EACI,EADJA,wBACI,EACoBC,mBAAS,oBAD7B,mBACGC,EADH,KACSC,EADT,KAGEC,EAASC,uBACb,SAACC,GACCA,EAAclE,SAAQ,SAACmE,GAErB,IAAMC,EAAS,IAAIC,WAEnBD,EAAOE,QAAU,kBAAMP,EAAQ,6BAC/BK,EAAOG,QAAU,kBAAMR,EAAQ,wBAC/BK,EAAOI,OAAS,WACd,IDNqBnF,EErBKoF,ED2BpBC,EAAYN,EAAOO,QFrB5B,SAAoBC,GACzB,IACMC,EAAQC,OAAOxF,aAAayF,QAAQ7F,GAE1C,GAAK2F,EAAL,CAIA,IAAMG,EAAcxF,KAAKyF,MAAMJ,GACzBK,EAAW,sBAAOF,GAAP,YAAuBJ,IAElCO,EAAa,YACd,IAAIC,IAAIF,EAAYG,KAAI,SAACC,GAAD,MAAU,CAACA,EAAI,YAAaA,OAAQC,UAGjEpG,EAAqBD,EAAeiG,QAVlChG,EAAqBD,EAAe0F,GEiB9BY,EDPqBnG,EGnBN,SAACA,GAExB,IAAMoG,EAAQpG,EAAKqG,YAAY,oBAAsB,GAC/CC,EAAStG,EAAKuG,MAAMH,GAGpBI,EAAa,IAAIC,OAAO,eAAgB,KACxCC,EAAoBJ,EACvBK,WAAW,KAAM,IACjBA,WAAW,KAAM,IACjBA,WAAW,KAAM,IACjBA,WAAW,KAAM,KACjBA,WAAW,KAAM,KACjBA,WAAW,MAAO,KAClBA,WAAW,KAAM,KACjBC,MAAMJ,GAGLK,EAA2B,GAS/B,OARAH,EAAkB/F,SAAQ,SAACmG,EAAI9D,GAC7B,IACE6D,EAAWlE,KAAKxC,KAAKyF,MAAMkB,IAC3B,MAAOC,QAKJF,EFD2BG,EC5BA5B,ED4B8BC,EC3BpD,OAARD,GAA+B,kBAARA,EAClB,kBAOC,IAAI6B,aAAcC,OAAO,IAAIC,WAAW/B,MFa3CpF,EAAKoH,QACV,SAACxG,GAAD,OACEL,EAAmB8G,SAASzG,EAAMG,aAClCH,EAAMgB,eAAe,eACrBhB,EAAMgB,eAAe,iBCGjB0C,GAAyBC,GACzBG,EAAQ,6BAEVK,EAAOuC,kBAAkBxC,QAG7B,CAACR,EAAyBC,IApBxB,EAsBoCgD,YAAY,CAAE5C,WAA9C6C,EAtBJ,EAsBIA,aAAcC,EAtBlB,EAsBkBA,cACtB,OACE,gDAASD,KAAT,IAAyBE,UAAU,cAAnC,UACE,qCAAWD,MACX,4BAAIhD,S,iBGvCV,SAASkD,EACPC,EACAC,EACAC,GACC,IACOC,EAAwCD,EAAxCC,WAAYC,EAA4BF,EAA5BE,SACpB,OADgDF,EAAlBG,cAE1BD,EAAWJ,EAAQC,EACnBE,EAAaH,EAAQC,ECK3B,SAASK,EAAYhE,EAAoBC,GACvC,OAASA,EAAOD,EAAc,KAAKiE,QAAQ,GAG7C,IAiGeC,EAjG2B,SAAC,GAAiB,IAQtDC,EACAC,EATuCC,EAAc,EAAdA,QAMvCC,EAAmB,EACnBC,EAAY,EAGVC,EAAkC,GAClCC,EAAoB,GACpBC,EAAoB,GACtBC,EAAuB,GACrBC,EAAe,CACnBC,UAAW,IACXC,YAAY,EACZC,OAAQ,CACNC,EAAG,CACDC,MAAO,CACLC,MAAO,UACPC,KAAM,CAAEC,KAAM,GAAIC,OAAQ,wBAC1BC,SAAU,EACVC,aAAa,KAInBC,QAAS,CACPC,QAAS,CACPC,UAAW,CACTC,WAAY,SAACF,GACX,IAAM/B,EAAQ+B,EAAQG,UAChB3F,EAAOwF,EAAQpB,QAAQpE,KAAKyD,GAC5B1D,EAAayF,EAAQpB,QAAQvI,KAAK4H,GAClCmC,EAAkB7B,EAAYhE,EAAYC,GAChD,MAAO,CAAC,SAAD,OACIA,EADJ,qBACqBD,EAAaC,GADlC,cAEE4F,EAFF,SAObC,OAAQ,CACNC,SAAS,KAITjK,EAAqB,CACzBkK,OAAQxB,EACRyB,SAAU,CACR,CACEC,MAAO,GACPpK,KAAM2I,EACNxE,KAAMyE,EACNyB,gBAAiBxB,EACjByB,YAAa,GACbC,YAAa,EACbC,YAAa,KAKbC,EAAcxI,OAAOyI,oBAAoBnC,GACzCoC,EAAyC,GAC/CF,EAAY9J,SAAQ,SAACZ,GAAS,IAAD,EACEwI,EAAQxI,GAA7BmE,EADmB,EACnBA,WAAYC,EADO,EACPA,KACpBwG,EAAgBhI,KAAK,CAAEiI,SAAU7K,EAAKmE,aAAYC,YAEpDwG,EAAgBzH,MAAK,SAAC2H,EAAGC,GAAJ,OAAUA,EAAE5G,WAAa2G,EAAE3G,cAChDyG,EAAgBhK,SAAQ,SAACoK,GAAW,IAC1B7G,EAA+B6G,EAA/B7G,WAAYC,EAAmB4G,EAAnB5G,KAAMyG,EAAaG,EAAbH,SAC1BpC,GAAoBtE,EACpBuE,GAAatE,EACbuE,EAAS/F,KAAK,CAACiI,IACfjC,EAAQhG,KAAKuB,GACb0E,EAAQjG,KAAKwB,MDjFF,SACb6G,EACAC,EACAnD,EACAoD,GACC,IAIGxI,EAAGyI,EAHCpD,EAAyBD,EAAzBC,WAEFF,GAF2BC,EAAbE,SACUD,GACIiD,EAGlC,IAAKtI,EAAI,EAAGA,EAAIsI,EAAYtI,IAC1ByI,EAAaxD,EAAejF,EAAGmF,EAAcC,GAC7CoD,EAAYvI,KAAKsI,EAAWE,ICsE9BC,CACET,EAAgBtI,OAChBgJ,IA9EqC,CACrCtD,WAAY,GACZC,SAAU,IACVC,eAAe,GA6EfY,GAEFR,EAAcG,EAAmBC,EACjCH,EAAeJ,EAAYM,EAAkBC,GAC7C,IAAM6C,EAAkB,0BAAsB9C,EAAtB,mBAAiDC,EAAjD,qBAAuEJ,EAAvE,iBAA2FC,EAA3F,MAExB,OACE,qCACE,qBAAKZ,UAAU,SAAf,SACE,oBAAIA,UAAU,QAAd,SAAuB4D,MAEzB,cAAC,IAAD,CAAKtL,KAAMA,EAAM8I,QAASA,Q,kCC5GhCyC,IAAMC,OAAOC,K,YCgHEC,EAzGqC,SAAC,GAG9C,IAFLlI,EAEI,EAFJA,YACAmI,EACI,EADJA,SAEMC,EAAuC,CAC3CC,MAAO,EACPzB,MAAO,YAHL,EAK4B5F,mBAA0C,IALtE,mBAKGsH,EALH,KAKaC,EALb,KAMEC,EAAWC,iBAAOH,GACxBE,EAASE,QAAUJ,EAEnBK,qBAAU,WACR,GAAIL,EAASzJ,OAAQ,CACnB,IAAI+J,GAAU,EACRC,EAAe,YAAO7I,EAAYtB,QACjB4J,EAAS9F,KAAI,SAACc,GAAD,OAAQA,EAAG+E,SAChClL,SAAQ,SAAC2L,GACjBD,EAAgBhF,SAASiF,KAC5BF,GAAU,MAGTA,GACHL,EAAY,OAGf,CAACD,EAAUtI,IAEd,IAAM+I,EAAqB,YAAO/I,EAAYtB,QAExC4G,EAAiC,GACvCyD,EAAY5L,SAAQ,SAACZ,EAAKiD,GACxB,IAAMwJ,EAAwBjB,IAAMkB,KAAK1M,GAAK2M,OAAO,oBAC/CC,EAAgB,CACpBd,MAAO9L,EACPqK,MAAM,WAAD,OAAapH,EAAM,EAAnB,eAA2BwJ,IAElC1D,EAAQnG,KAAKgK,MAEf7D,EAAQ8D,UAER,IAAMC,EAAsB,WAAO,IAAD,EAGhC,OAAe,OAARb,QAAQ,IAARA,GAAA,UAAAA,EAAUE,eAAV,eAAmB7J,UAAWyG,EAAQzG,QA6C/C,OACE,cAAC,IAAD,CACEqF,UAAW,iBACXoF,gBAAiB,iBACjBC,aAAcnB,EACdoB,iBA7CqB,SAACC,GAAD,aACf,OAARjB,QAAQ,IAARA,GAAA,UAAAA,EAAUE,eAAV,eAAmBgB,MAAK,qBAAGrB,QAAsBoB,EAAOpB,WACxDgB,KA4CE/D,QAhDe,CAAO8C,GAAP,OAA2B9C,GAiD1C+C,MA3CoBgB,IAAwB,CAACjB,GAAmBE,EA4ChEH,SA1CiB,SACnBwB,EACAC,GAEA,IAAMC,EAAmC,GACjCC,EAAiCF,EAAjCE,OAAQL,EAAyBG,EAAzBH,OAAQM,EAAiBH,EAAjBG,aACxB,GAAe,kBAAXD,IAAoC,OAANL,QAAM,IAANA,OAAA,EAAAA,EAAQpB,SAAUD,EAAgBC,MAClEE,EAAYjD,GACZuE,EAAuB1K,KAAvB,MAAA0K,EAAsB,YAASvE,EAAQ9C,KAAI,SAACiH,GAAD,OAAYA,EAAOpB,gBACzD,GACO,oBAAXyB,IACO,OAANL,QAAM,IAANA,OAAA,EAAAA,EAAQpB,SAAUD,EAAgBC,OACxB,iBAAXyB,IACa,OAAZC,QAAY,IAAZA,OAAA,EAAAA,EAAc1B,SAAUD,EAAgBC,MAE1CE,EAAY,SACP,GACiB,oBAAtBqB,EAAWE,QACXT,IACA,CACA,IAAMW,EAAkB1E,EAAQ1B,QAC9B,qBAAGyE,SAAiB,OAAKoB,QAAL,IAAKA,OAAL,EAAKA,EAAQpB,UAEnCE,EAAYyB,GACZH,EAAuB1K,KAAvB,MAAA0K,EAAsB,YACjBG,EAAgBxH,KAAI,SAACiH,GAAD,OAAYA,EAAOpB,gBAG5CE,EAAYoB,GAAY,IACxBE,EAAuB1K,KAAvB,MAAA0K,EAAsB,YAASF,EAASnH,KAAI,SAACiH,GAAD,OAAYA,EAAOpB,WAEjEF,GAAYA,EAAS0B,IAYnBI,qBAAqB,EACrBC,mBAAmB,EACnBC,SAAO,KCrGb,IAuBeC,EAvB+B,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOlC,EAAe,EAAfA,SAAe,EACrCnH,qBADqC,mBAC9DsH,EAD8D,KACpDC,EADoD,KAE/DjD,EAA8B+E,EAAM7H,KAAI,SAAC8H,GAAD,MAAW,CACvDjC,MAAOiC,EACP1D,MAAO0D,MAQT,OACE,cAAC,IAAD,CACEpG,UAAW,cACXoF,gBAAiB,cACjBhE,QAASA,EACT+C,MAAOC,EACPH,SAXiB,SAACwB,GACpBpB,EAAYoB,GACZxB,GAAYwB,GAAYxB,EAASwB,EAAStB,WCyF/BkC,EAnF6B,WAAO,IAAD,EACFvJ,mBAC5C,IAF8C,mBACzC/C,EADyC,KACxBuM,EADwB,OAIlBxJ,mBAAmB,CAAC,KAJF,mBAIzCyJ,EAJyC,KAIhCC,EAJgC,OAKF1J,mBAAiB,IALf,mBAKzC2J,EALyC,KAKxBC,EALwB,OAMV5J,mBAAwB,IAAIuB,KANlB,mBAMzCvC,EANyC,KAM5B6K,EAN4B,OAOA7J,mBAAmB,CAAC,IAPpB,mBAOzC8J,EAPyC,KAOvBC,EAPuB,OAS9C/J,oBAAkB,GAT4B,mBAQzCgK,EARyC,KAQpBC,EARoB,OAURjK,mBAA0B,IAVlB,mBAUzCkK,EAVyC,KAU3BC,EAV2B,KAuDhD,OA3CAxC,qBAAU,WAER,ICpC6ByC,EDoCvBC,EAAyBpJ,OAAOxF,aAAayF,QAAQ7F,GAC3D,GAAIgP,EAAwB,CAC1B,IACMpN,EAAkBhB,EADAN,KAAKyF,MAAMiJ,IAEnCb,EAAmBvM,GACnByM,GCzC2BU,EDyCPnN,ECxCjB,YAAI,IAAIqN,IAAIF,EAAQ5I,KAAI,SAACpF,GAAD,OAAWA,EAAMQ,qBD0C7C,CAACoN,IAEJrC,qBAAU,WAER,ITgBF4C,EShBQC,GTgBRD,EShB6DZ,EAAjB1M,ETkBf2F,QAC3B,SAACxG,GAAD,OAAWA,EAAMQ,aAAe2N,MSlBhCV,EH7CG,SAAqBO,GAC1B,IAAMK,EAA+B,IAAIlJ,IACzC6I,EAAQ1L,MAAK,SAAC2H,EAAGC,GAAJ,OAAUD,EAAE/J,YAAcgK,EAAEhK,eAEzC,IACIoO,EADAC,EAA4B,KAyBhC,OAvBAP,EAAQQ,OAAM,SAACxO,GACb,GAAIuO,EAAY,CAEd,IAM6B,EANvBE,EAAqB9D,IAAMkB,KAAKyC,EAAUpO,aAMhD,GALgCyK,IAC7BkB,KAAK7L,EAAME,aACX2K,UAAU4D,EAAoBA,EAAmBC,IAAI,EAAG,SAMzD,OAFA,UAAAL,EAAcM,IAAIJ,UAAlB,SAA+BxM,KAAK/B,GACpCsO,EAAYtO,GACL,EAQX,OAHAuO,EAAavO,EAAME,YACnBoO,EAAYtO,EACZqO,EAAcO,IAAIL,EAAY,CAACvO,KACxB,KAGFqO,EGgBUQ,CAAYT,IAC3BT,EAAoB,CAAC,MACpB,CAAC9M,EAAiB0M,IAErBhC,qBAAU,WAER,IAAMuD,EAA0C,GAChD,UAAIlM,QAAJ,IAAIA,OAAJ,EAAIA,EAAa8F,KACf,GAAIgF,EAAiBjH,SAAS,GAC5BqI,EAAoB/M,KAApB,MAAA+M,EAAmB,YACdnM,EAA+BC,SAE/B,CACL,IAAMmM,EAAiC,IAAI5J,IAC3CuI,EAAiB3N,SAAQ,SAACwO,GACxB,IAAMzL,EAAUF,EAAY+L,IAAIJ,GAChCzL,GAAWiM,EAAgBH,IAAIL,EAAYzL,MAE7CgM,EAAoB/M,KAApB,MAAA+M,EAAmB,YACdnM,EAA+BoM,KAMxCD,EAAoBrN,QAClBsM,ET6FC,SACL3O,GAEA,IAAMuI,EAA2B,GAajC,OAZAvI,EAAKW,SAAQ,SAACC,GACZ,IAAMgP,EACJhP,EAAMM,cAAcmG,SAAShH,IAC7BO,EAAMO,WAAWkG,SAAShH,GACtBwP,EAA0CjP,EAAMM,cAyB7C4O,QAAO,SAACjF,EAAGC,GAAJ,OAAUD,EAAEkF,OAAO,OAAQjF,MAvBzC9G,EAAmBuE,EADjBqH,EAC0B,KAEAC,EAFMjP,MAM/B2H,ES7GayH,CAAwBN,MACzC,CAAClM,EAAa8K,IAGf,sBAAK5G,UAAU,YAAf,UACE,sBAAKA,UAAU,qBAAf,UACE,cAAC,EAAD,CACEpD,wBAAyBmK,EACzBlK,wBAAyBiK,IAE3B,sBAAK9G,UAAU,qBAAf,UACGuG,GACC,cAAC,EAAD,CAAYtC,SAAUyC,EAAoBP,MAAOI,IAElDzK,GACC,cAAC,EAAD,CACEmI,SAAU4C,EACV/K,YAAaA,UAKpB/B,GACC,qBAAKiG,UAAU,6BAAf,SACE,cAAC,EAAD,CAAUa,QAASmG,UExFduB,MARf,WACE,OACE,qBAAKvI,UAAU,YAAf,SACE,cAAC,EAAD,OCOSwI,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.d7ca98ad.chunk.js","sourcesContent":["import React from \"react\";\nimport { ArenaMatch } from \"../Types/ArenaTypes\";\n\nexport const INSTANCE_DATA = \"instanceData\";\nexport const MY_CHAR_NAME = \"myCharName\";\n\nexport function mergeState(filteredData: ArenaMatch[]): void {\n  const filterKey = \"enteredTime\";\n  const state = window.localStorage.getItem(INSTANCE_DATA);\n\n  if (!state) {\n    setLocalStorageField(INSTANCE_DATA, filteredData);\n    return;\n  }\n  const parsedState = JSON.parse(state);\n  const mergedState = [...parsedState, ...filteredData];\n\n  const filteredState = [\n    ...new Map(mergedState.map((item) => [item[filterKey], item])).values(),\n  ];\n\n  setLocalStorageField(INSTANCE_DATA, filteredState);\n}\n\nexport function localStorageToState(\n  key: string,\n  setReactState: React.Dispatch<React.SetStateAction<any>>\n): void {\n  const currentState = window.localStorage.getItem(key);\n  currentState && setReactState(JSON.parse(currentState));\n}\n\nexport function setLocalStorageField(key: string, data: any): void {\n  localStorage.setItem(key, JSON.stringify(data));\n}\n","import {\n  ArenaMatch,\n  arenaPlayerKeys,\n  ArenaTeam,\n  MatchSessions,\n  ModdedArenaMatch,\n  ModdedArenaTeam,\n  TeamCompDataset,\n} from \"../Types/ArenaTypes\";\n\nconst DISCONNECTED = \"!disconnected\";\nconst DC_TEAM_NAME = \"~DC~\";\nconst ARENA_INSTANCE_IDS: number[] = [572, 562, 559]; // \"Ruins of Lordaeron\", \"Blade's Edge Arena\", \"Nagrand Arena\"\nconst PLAYER_KEYS: arenaPlayerKeys[] = [\n  \"player1\",\n  \"player2\",\n  \"player3\",\n  \"player4\",\n  \"player5\",\n];\n\nexport function filterJunkData(data: ArenaMatch[]): ArenaMatch[] {\n  return data.filter(\n    (match) =>\n      ARENA_INSTANCE_IDS.includes(match.instanceID) &&\n      match.hasOwnProperty(\"purpleTeam\") &&\n      match.hasOwnProperty(\"goldTeam\")\n  );\n}\n\nexport function getModdedArenaMatches(data: ArenaMatch[]): ModdedArenaMatch[] {\n  const modifiedData: ModdedArenaMatch[] = [];\n  data.forEach((match) => {\n    const moddedMatch: ModdedArenaMatch = {\n      enteredTime: match.enteredTime,\n      instanceID: match.instanceID,\n      instanceName: match.instanceName,\n      playerName: match.playerName,\n      enemyTeamComp: [],\n      myTeamComp: [],\n      myTeamName: \"\",\n      bracket: 0,\n      myTeam: {},\n      enemyTeam: {},\n      win: false,\n    };\n\n    const moddedMatchData = getModdedArenaData(match);\n    Object.assign(moddedMatch, moddedMatchData);\n\n    // Filter out skirmish matches\n    if (\n      !(\n        moddedMatch.myTeam.player1?.teamMMR === 0 &&\n        moddedMatch.enemyTeam.player1?.teamMMR === 0\n      )\n    ) {\n      modifiedData.push(moddedMatch);\n    }\n  });\n  return modifiedData;\n}\n\nexport function filterMatchData(\n  data: ModdedArenaMatch[],\n  selectedTeam: string\n): ModdedArenaMatch[] {\n  let filteredMatchData = data.filter(\n    (match) => match.myTeamName === selectedTeam\n  );\n  return filteredMatchData;\n}\n\nexport function matchArrayFromSelectedSessions(\n  sessionData: MatchSessions\n): ModdedArenaMatch[] {\n  const filteredMatches: ModdedArenaMatch[] = [];\n\n  sessionData.forEach((session) => {\n    filteredMatches.push(...session);\n  });\n\n  return filteredMatches;\n}\n\nfunction getModdedArenaData(match: ArenaMatch): any {\n  let myTeam: ArenaTeam, enemyTeam: ArenaTeam, win: boolean, myTeamName: string;\n  const myCharName = match.playerName;\n  if (match.goldTeam.hasOwnProperty(myCharName)) {\n    myTeam = match.goldTeam;\n    myTeamName = match.goldTeam[myCharName].teamName;\n    enemyTeam = match.purpleTeam;\n    win = !!match.winningFaction;\n  } else {\n    myTeam = match.purpleTeam;\n    myTeamName = match.purpleTeam[myCharName].teamName;\n    enemyTeam = match.goldTeam;\n    win = !match.winningFaction;\n  }\n\n  const myTeamNames: string[] = Object.keys(myTeam);\n  const enemyTeamNames: string[] = Object.keys(enemyTeam);\n  const myTeamPlayerCount = myTeamNames.length;\n  const enemyTeamPlayerCount = enemyTeamNames.length;\n  const bracket = Math.max(myTeamPlayerCount, enemyTeamPlayerCount);\n  fillNameArraysWithBlanks(myTeamNames, enemyTeamNames, bracket);\n\n  // modded arena team\n  let myModdedTeam: ModdedArenaTeam = {};\n  let myTeamComp: string[] = [];\n  let enemyModdedTeam: ModdedArenaTeam = {};\n  let enemyTeamComp: string[] = [];\n  myTeamNames.forEach((name, idx) =>\n    getModdedTeamsAndTeamComps(name, idx, myTeam, myModdedTeam, myTeamComp)\n  );\n  enemyTeamNames.forEach((name, idx) =>\n    getModdedTeamsAndTeamComps(\n      name,\n      idx,\n      enemyTeam,\n      enemyModdedTeam,\n      enemyTeamComp\n    )\n  );\n  return {\n    bracket,\n    win,\n    myTeamName,\n    myTeam: myModdedTeam,\n    myTeamComp: myTeamComp.sort(),\n    enemyTeam: enemyModdedTeam,\n    enemyTeamComp: enemyTeamComp.sort(),\n  };\n}\n\nfunction getModdedTeamsAndTeamComps(\n  name: string,\n  idx: number,\n  teamObj: ArenaTeam,\n  moddedTeamObj: ModdedArenaTeam,\n  compArr: string[]\n) {\n  const playerDCed = name === DC_TEAM_NAME;\n  moddedTeamObj[PLAYER_KEYS[idx]] = playerDCed\n    ? null\n    : {\n        name: name,\n        ...teamObj[name],\n      };\n  compArr.push(playerDCed ? DISCONNECTED : teamObj[name].class);\n}\n\nfunction fillNameArraysWithBlanks(\n  myTeamNames: string[],\n  enemyTeamNames: string[],\n  arenaBracket: number\n): void {\n  if (myTeamNames.length < arenaBracket) {\n    for (let i = 0; i < arenaBracket - myTeamNames.length; i++) {\n      myTeamNames.push(DC_TEAM_NAME);\n    }\n  }\n  if (enemyTeamNames.length < arenaBracket) {\n    for (let i = 0; i < arenaBracket - enemyTeamNames.length; i++) {\n      enemyTeamNames.push(DC_TEAM_NAME);\n    }\n  }\n}\n\nexport function createBasicChartDataset(\n  data: ModdedArenaMatch[]\n): TeamCompDataset {\n  const dataset: TeamCompDataset = {};\n  data.forEach((match) => {\n    const hasDCedPlayers =\n      match.enemyTeamComp.includes(DISCONNECTED) ||\n      match.myTeamComp.includes(DISCONNECTED);\n    const enemyTeamCompString = teamcompArrToString(match.enemyTeamComp);\n    if (hasDCedPlayers) {\n      fillTeamCompObject(dataset, \"DC\", match);\n    } else {\n      fillTeamCompObject(dataset, enemyTeamCompString, match);\n    }\n  });\n\n  return dataset;\n}\n\nfunction fillTeamCompObject(\n  obj: TeamCompDataset,\n  key: string,\n  match: ModdedArenaMatch\n): void {\n  if (obj[key]) {\n    obj[key].matchCount += 1;\n    match.win && obj[key].wins++;\n  } else {\n    obj[key] = { matchCount: 1, wins: Number(match.win) };\n  }\n}\n\nfunction teamcompArrToString(arr: string[]): string {\n  return arr.reduce((a, b) => a.concat(\" \\\\ \", b));\n}\n","import React, { useCallback, useState } from \"react\";\nimport { parseData } from \"../utils/parseData\";\nimport { arrayBufferToString } from \"../utils/ArrayBuffer-StringHelper\";\nimport { useDropzone } from \"react-dropzone\";\nimport { mergeState } from \"../utils/stateManagement\";\nimport { filterJunkData } from \"../utils/dataSetHelpers\";\n\nexport type landingProps = {\n  localStoreChangeHandler: React.Dispatch<React.SetStateAction<boolean>>;\n  localStorageChangeValue: boolean;\n};\n\nconst UploadArea: React.FC<landingProps> = ({\n  localStoreChangeHandler,\n  localStorageChangeValue,\n}) => {\n  const [text, setText] = useState(\"Upload file here\");\n\n  const onDrop = useCallback(\n    (acceptedFiles) => {\n      acceptedFiles.forEach((file: any) => {\n        //TBD\n        const reader = new FileReader();\n\n        reader.onabort = () => setText(\"File reading was aborted\");\n        reader.onerror = () => setText(\"File reading failed\");\n        reader.onload = () => {\n          const binaryStr = reader.result;\n          mergeState(filterJunkData(parseData(arrayBufferToString(binaryStr))));\n          localStoreChangeHandler(!localStorageChangeValue);\n          setText(\"File successfully parsed\");\n        };\n        reader.readAsArrayBuffer(file);\n      });\n    },\n    [localStoreChangeHandler, localStorageChangeValue]\n  );\n  const { getRootProps, getInputProps } = useDropzone({ onDrop });\n  return (\n    <div {...getRootProps()} className=\"upload-area\">\n      <input {...getInputProps()} />\n      <p>{text}</p>\n    </div>\n  );\n};\n\nexport default UploadArea;\n","export function arrayBufferToString(buf: string | ArrayBuffer | null): string {\n  if (buf === null || typeof buf === \"string\") {\n    return '{\"error\":true}';\n  }\n  let jsonKey: string = \"\";\n  // ** works, but fails with unicode chars **\n  // new Uint8Array(buf).forEach(\n  //   (byte: number) => (jsonKey += String.fromCharCode(byte))\n  // );\n  jsonKey = new TextDecoder().decode(new Uint8Array(buf));\n  return jsonKey;\n}\n\nexport function stringToArrayBuffer(str: string) {\n  var buf = new ArrayBuffer(str.length * 2); // 2 bytes for each char\n  var bufView = new Uint16Array(buf);\n  for (var i = 0, strLen = str.length; i < strLen; i++) {\n    bufView[i] = str.charCodeAt(i);\n  }\n  return buf;\n}\n","import { ArenaMatch } from \"../Types/ArenaTypes\";\n\nexport const parseData = (data: string): ArenaMatch[] => {\n  // Get part of the string with actual instance data\n  const start = data.lastIndexOf('[\"instances\"] = ') + 17; // Only works if actual instance object is last in data set\n  const newStr = data.slice(start);\n\n  // Clean up the string and split it in separate objects\n  const enumRegexp = new RegExp(/, -- \\[\\d+\\]/, \"g\");\n  const instanceDataArray = newStr\n    .replaceAll(\"\\n\", \"\")\n    .replaceAll(\"\\r\", \"\")\n    .replaceAll(\"\\t\", \"\")\n    .replaceAll('[\"', '\"')\n    .replaceAll('\"]', '\"')\n    .replaceAll(\" = \", \":\")\n    .replaceAll(\",}\", \"}\")\n    .split(enumRegexp);\n\n  // Parse all valid objects\n  let parsedData: ArenaMatch[] = [];\n  instanceDataArray.forEach((el, idx) => {\n    try {\n      parsedData.push(JSON.parse(el));\n    } catch (e) {\n      // Ignore failed parses (random strings and AB instances)\n      // console.log(e);\n    }\n  });\n  return parsedData;\n};\n","import { ColorRangeInfo } from \"../Types/ArenaTypes\";\n\nfunction calculatePoint(\n  index: number,\n  intervalSize: number,\n  colorRangeInfo: ColorRangeInfo\n) {\n  const { colorStart, colorEnd, useEndAsStart } = colorRangeInfo;\n  return useEndAsStart\n    ? colorEnd - index * intervalSize\n    : colorStart + index * intervalSize;\n}\n\nexport default function generateChartColors(\n  dataLength: number,\n  colorScale: (i: number) => string,\n  colorRangeInfo: ColorRangeInfo,\n  targetArray: string[]\n) {\n  const { colorStart, colorEnd } = colorRangeInfo;\n  const colorRange = colorEnd - colorStart;\n  const intervalSize = colorRange / dataLength;\n  let i, colorPoint;\n\n  for (i = 0; i < dataLength; i++) {\n    colorPoint = calculatePoint(i, intervalSize, colorRangeInfo);\n    targetArray.push(colorScale(colorPoint));\n  }\n}\n\nexport {};\n","import React from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport { interpolateTurbo } from \"d3-scale-chromatic\";\nimport {\n  ChartDataSet,\n  ColorRangeInfo,\n  SortableTeamCompObj,\n  TeamCompDataset,\n} from \"../Types/ArenaTypes\";\nimport generateChartColors from \"../utils/colorGeneration\";\n\ntype BarChartProps = {\n  dataset: TeamCompDataset;\n};\n\nfunction calcWinrate(matchCount: number, wins: number): string {\n  return ((wins / matchCount) * 100).toFixed(1);\n}\n\nconst BarChart: React.FC<BarChartProps> = ({ dataset }) => {\n  const colorRangeInfo: ColorRangeInfo = {\n    colorStart: 0.1,\n    colorEnd: 0.85,\n    useEndAsStart: true,\n  };\n  let totalMatchNumber = 0;\n  let totalWins = 0;\n  let totalLosses: number;\n  let totalWinrate: string;\n  const labelArr: (string | string[])[] = [];\n  const dataArr: number[] = [];\n  const winsArr: number[] = [];\n  let colorArray: string[] = [];\n  const options: any = {\n    indexAxis: \"y\",\n    responsive: true,\n    scales: {\n      y: {\n        ticks: {\n          color: \"#292F36\",\n          font: { size: 15, family: \"'Roboto', sans-serif\" },\n          stepSize: 1,\n          beginAtZero: true,\n        },\n      },\n    },\n    plugins: {\n      tooltip: {\n        callbacks: {\n          afterLabel: (tooltip: any) => {\n            const index = tooltip.dataIndex;\n            const wins = tooltip.dataset.wins[index];\n            const matchCount = tooltip.dataset.data[index];\n            const winrate: string = calcWinrate(matchCount, wins);\n            return [\n              `Wins: ${wins}, Losses: ${matchCount - wins}`,\n              `WR: ${winrate}%`,\n            ];\n          },\n        },\n      },\n      legend: {\n        display: false,\n      },\n    },\n  };\n  const data: ChartDataSet = {\n    labels: labelArr,\n    datasets: [\n      {\n        label: \"\",\n        data: dataArr,\n        wins: winsArr,\n        backgroundColor: colorArray,\n        borderColor: [],\n        borderWidth: 1,\n        hoverOffset: 6,\n      },\n    ],\n  };\n\n  const datasetKeys = Object.getOwnPropertyNames(dataset);\n  const sortableEntries: SortableTeamCompObj[] = [];\n  datasetKeys.forEach((key) => {\n    const { matchCount, wins } = dataset[key];\n    sortableEntries.push({ teamComp: key, matchCount, wins });\n  });\n  sortableEntries.sort((a, b) => b.matchCount - a.matchCount);\n  sortableEntries.forEach((entry) => {\n    const { matchCount, wins, teamComp } = entry;\n    totalMatchNumber += matchCount;\n    totalWins += wins;\n    labelArr.push([teamComp]);\n    dataArr.push(matchCount);\n    winsArr.push(wins);\n  });\n  generateChartColors(\n    sortableEntries.length,\n    interpolateTurbo,\n    colorRangeInfo,\n    colorArray\n  );\n  totalLosses = totalMatchNumber - totalWins;\n  totalWinrate = calcWinrate(totalMatchNumber, totalWins);\n  const chartTitle: string = `Matches Played: ${totalMatchNumber}, Wins: ${totalWins}, Losses: ${totalLosses}, WR: ${totalWinrate}%,`;\n\n  return (\n    <>\n      <div className=\"header\">\n        <h1 className=\"title\">{chartTitle}</h1>\n      </div>\n      <Bar data={data} options={options} />\n    </>\n  );\n};\n\nexport default BarChart;\n","import { MatchSessions, ModdedArenaMatch } from \"../Types/ArenaTypes\";\nimport dayjs from \"dayjs\";\nimport isBetween from \"dayjs/plugin/isBetween\";\ndayjs.extend(isBetween);\n\nexport function getSessions(matches: ModdedArenaMatch[]): MatchSessions {\n  const matchSessions: MatchSessions = new Map();\n  matches.sort((a, b) => a.enteredTime - b.enteredTime);\n\n  let sessionKey: number | null = null;\n  let prevMatch: ModdedArenaMatch;\n  matches.every((match) => {\n    if (sessionKey) {\n      // If session object is present, find if new match fits that session time frame\n      const prevMatchEnterTime = dayjs.unix(prevMatch.enteredTime);\n      const matchIsWithinOldSession = dayjs\n        .unix(match.enteredTime)\n        .isBetween(prevMatchEnterTime, prevMatchEnterTime.add(1, \"hour\"));\n\n      // If match fits, add it to old session\n      if (matchIsWithinOldSession) {\n        matchSessions.get(sessionKey)?.push(match);\n        prevMatch = match;\n        return true;\n      }\n    }\n\n    // If match doesn't fit or session key is null, create new session\n    sessionKey = match.enteredTime;\n    prevMatch = match;\n    matchSessions.set(sessionKey, [match]);\n    return true;\n  });\n\n  return matchSessions;\n}\n","import React, { useEffect, useRef, useState } from \"react\";\nimport { MatchSessions, SessionSelectOption } from \"../Types/ArenaTypes\";\nimport Select, { ActionMeta, MultiValue } from \"react-select\";\nimport dayjs from \"dayjs\";\n\nexport type sessionSelectProps = {\n  sessionData: MatchSessions;\n  onChange: (value: number[]) => void;\n};\n\nconst SessionSelect: React.FC<sessionSelectProps> = ({\n  sessionData,\n  onChange,\n}) => {\n  const selectAllOption: SessionSelectOption = {\n    value: 0,\n    label: \"All Data\",\n  };\n  const [selected, setSelected] = useState<MultiValue<SessionSelectOption>>([]);\n  const valueRef = useRef(selected);\n  valueRef.current = selected;\n\n  useEffect(() => {\n    if (selected.length) {\n      let overlap = true;\n      const sessionDataKeys = [...sessionData.keys()];\n      const selectedValues = selected.map((el) => el.value);\n      selectedValues.forEach((val) => {\n        if (!sessionDataKeys.includes(val)) {\n          overlap = false;\n        }\n      });\n      if (!overlap) {\n        setSelected([]);\n      }\n    }\n  }, [selected, sessionData]);\n\n  const sessionKeys: number[] = [...sessionData.keys()];\n\n  const options: SessionSelectOption[] = [];\n  sessionKeys.forEach((key, idx) => {\n    const formattedData: string = dayjs.unix(key).format(\"HH:mm - DD/MM/YY\");\n    const sessionOption = {\n      value: key,\n      label: `Session ${idx + 1}, @ ${formattedData}`,\n    };\n    options.push(sessionOption);\n  });\n  options.reverse();\n\n  const isSelectAllSelected = () => {\n    // console.dir(valueRef?.current);\n    // console.dir(options);\n    return valueRef?.current?.length === options.length;\n  };\n\n  const getOptions = () => [selectAllOption, ...options];\n\n  const isOptionSelected = (option: SessionSelectOption): boolean =>\n    valueRef?.current?.some(({ value }) => value === option.value) ||\n    isSelectAllSelected();\n\n  const getValue = () => (isSelectAllSelected() ? [selectAllOption] : selected);\n\n  const handleChange = (\n    newValue: MultiValue<SessionSelectOption>,\n    actionMeta: ActionMeta<SessionSelectOption>\n  ) => {\n    const selectedTimestampArray: number[] = [];\n    const { action, option, removedValue } = actionMeta;\n    if (action === \"select-option\" && option?.value === selectAllOption.value) {\n      setSelected(options);\n      selectedTimestampArray.push(...options.map((option) => option.value));\n    } else if (\n      (action === \"deselect-option\" &&\n        option?.value === selectAllOption.value) ||\n      (action === \"remove-value\" &&\n        removedValue?.value === selectAllOption.value)\n    ) {\n      setSelected([]);\n    } else if (\n      actionMeta.action === \"deselect-option\" &&\n      isSelectAllSelected()\n    ) {\n      const filteredOptions = options.filter(\n        ({ value }) => value !== option?.value\n      );\n      setSelected(filteredOptions);\n      selectedTimestampArray.push(\n        ...filteredOptions.map((option) => option.value)\n      );\n    } else {\n      setSelected(newValue || []);\n      selectedTimestampArray.push(...newValue.map((option) => option.value));\n    }\n    onChange && onChange(selectedTimestampArray);\n  };\n\n  return (\n    <Select\n      className={\"session-select\"}\n      classNamePrefix={\"session-select\"}\n      defaultValue={selectAllOption}\n      isOptionSelected={isOptionSelected}\n      options={getOptions()}\n      value={getValue()}\n      onChange={handleChange}\n      hideSelectedOptions={false}\n      closeMenuOnSelect={false}\n      isMulti\n    />\n  );\n};\n\nexport default SessionSelect;\n","import React, { useState } from \"react\";\nimport Select, { SingleValue } from \"react-select\";\nimport { TeamSelectOption } from \"../Types/ArenaTypes\";\n\ntype teamSelectProps = {\n  onChange: (value: string) => void;\n  teams: string[];\n};\n\nconst TeamSelect: React.FC<teamSelectProps> = ({ teams, onChange }) => {\n  const [selected, setSelected] = useState<SingleValue<TeamSelectOption>>();\n  const options: TeamSelectOption[] = teams.map((team) => ({\n    value: team,\n    label: team,\n  }));\n\n  const handleChange = (newValue: SingleValue<TeamSelectOption>) => {\n    setSelected(newValue);\n    onChange && newValue && onChange(newValue.value);\n  };\n\n  return (\n    <Select\n      className={\"team-select\"}\n      classNamePrefix={\"team-select\"}\n      options={options}\n      value={selected}\n      onChange={handleChange}\n    />\n  );\n};\n\nexport default TeamSelect;\n","import React, { useEffect, useState } from \"react\";\nimport UploadArea from \"./UploadArea\";\nimport { INSTANCE_DATA } from \"../utils/stateManagement\";\nimport {\n  MatchSessions,\n  ModdedArenaMatch,\n  TeamCompDataset,\n} from \"../Types/ArenaTypes\";\nimport BarChart from \"./BarChart\";\nimport {\n  createBasicChartDataset,\n  matchArrayFromSelectedSessions,\n  getModdedArenaMatches,\n  filterMatchData,\n} from \"../utils/dataSetHelpers\";\nimport { getSessions } from \"../utils/sessionManagement\";\nimport SessionSelect from \"./SessionSelect\";\nimport getTeams from \"../utils/teamManagement\";\nimport TeamSelect from \"./TeamSelect\";\n\nexport type dashboardProps = {\n  className?: string;\n};\n\nconst Dashboard: React.FC<dashboardProps> = () => {\n  const [moddedMatchData, setModdedMatchData] = useState<ModdedArenaMatch[]>(\n    []\n  );\n  const [myTeams, setMyTeams] = useState<string[]>([\"\"]);\n  const [myTeamSelection, setMyTeamSelection] = useState<string>(\"\");\n  const [sessionData, setSessionData] = useState<MatchSessions>(new Map());\n  const [sessionSelection, setSessionSelection] = useState<number[]>([0]);\n  const [localStorageChanged, setLocalStorageChanged] =\n    useState<boolean>(false);\n  const [chartDataset, setChartDataset] = useState<TeamCompDataset>({});\n\n  useEffect(() => {\n    // Local storage match data => Modified arena match data in local state\n    const localStorageMatchState = window.localStorage.getItem(INSTANCE_DATA);\n    if (localStorageMatchState) {\n      const parsedMatchData = JSON.parse(localStorageMatchState); // Get raw match data from storage\n      const moddedMatchData = getModdedArenaMatches(parsedMatchData); // Get modified match data\n      setModdedMatchData(moddedMatchData); // Put all modified match data in local state\n      setMyTeams(getTeams(moddedMatchData)); // Get team data\n    }\n  }, [localStorageChanged]);\n\n  useEffect(() => {\n    // Apply filters to modded match data and create session data based on result\n    const filteredMatchData = filterMatchData(moddedMatchData, myTeamSelection);\n    setSessionData(getSessions(filteredMatchData));\n    setSessionSelection([0]);\n  }, [moddedMatchData, myTeamSelection]);\n\n  useEffect(() => {\n    // Filter by currently selected sessions\n    const selectedSessionData: ModdedArenaMatch[] = [];\n    if (sessionData?.size) {\n      if (sessionSelection.includes(0)) {\n        selectedSessionData.push(\n          ...matchArrayFromSelectedSessions(sessionData)\n        );\n      } else {\n        const selectedMatches: MatchSessions = new Map();\n        sessionSelection.forEach((sessionKey) => {\n          const session = sessionData.get(sessionKey);\n          session && selectedMatches.set(sessionKey, session);\n        });\n        selectedSessionData.push(\n          ...matchArrayFromSelectedSessions(selectedMatches)\n        );\n      }\n    }\n\n    // Create chart dataset\n    selectedSessionData.length &&\n      setChartDataset(createBasicChartDataset(selectedSessionData));\n  }, [sessionData, sessionSelection]);\n\n  return (\n    <div className=\"dashboard\">\n      <div className=\"dashboard__top-bar\">\n        <UploadArea\n          localStoreChangeHandler={setLocalStorageChanged}\n          localStorageChangeValue={localStorageChanged}\n        />\n        <div className=\"dashboard__filters\">\n          {myTeams && (\n            <TeamSelect onChange={setMyTeamSelection} teams={myTeams} />\n          )}\n          {sessionData && (\n            <SessionSelect\n              onChange={setSessionSelection}\n              sessionData={sessionData}\n            />\n          )}\n        </div>\n      </div>\n      {moddedMatchData && (\n        <div className=\"dashboard__chart-container\">\n          <BarChart dataset={chartDataset} />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Dashboard;\n","import { ModdedArenaMatch } from \"../Types/ArenaTypes\";\n\nexport default function getTeams(matches: ModdedArenaMatch[]): string[] {\n  return [...new Set(matches.map((match) => match.myTeamName))];\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Dashboard from \"./components/Dashboard\";\n\nfunction App() {\n  return (\n    <div className=\"main-wrap\">\n      <Dashboard />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"normalize.css\";\nimport \"./styles/index.scss\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}