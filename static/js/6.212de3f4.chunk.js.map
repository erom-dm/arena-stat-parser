{"version":3,"sources":["components/LineChart.tsx","../../src/chart.tsx","../../src/index.tsx"],"names":["LineChart","selectedArenaMatches","selectedSessions","useState","LineChartTypes","perMatch","chartType","setChartType","matchDataset","useMemo","createMatchRatingChangeDataSet","sessionDataset","createSessionRatingChangeDataSet","getLineChartInputData","teamRatingArr","teamMMRArr","enemyTeamCompArr","labelArr","winArray","teamRatingArrPerSession","labelArrPerSession","sessionDates","Array","from","keys","map","timestamp","dayjs","unix","format","ticksConf","color","font","size","family","stepSize","beginAtZero","perMatchOptions","maintainAspectRatio","scales","ticks","autoSkip","maxTicksLimit","bounds","grid","borderDashOffset","x","plugins","tooltip","callbacks","afterLabel","index","dataIndex","enemyComp","dataset","win","perMatchData","labels","datasets","label","data","fill","backgroundColor","borderColor","yAxisID","perSessionOptions","console","dir","rating","dateString","title","perSessionData","propObject","options","className","onClick","prevState","perSession","ChartComponent","forwardRef","id","props","height","width","redraw","type","getDatasetAtEvent","getElementAtEvent","getElementsAtEvent","fallbackContent","rest","canvas","useRef","computedData","merge","chart","setChart","useImperativeHandle","renderChart","destroyChart","useEffect","setTimeout","newDataSets","newChartData","currentDataSets","assign","currentDataSet","find","d","newDataSet","updateChart","ref","e","intersect","role","Line","Bar","chartjs"],"mappings":"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","file":"static/js/6.212de3f4.chunk.js","sourcesContent":["import React, { useMemo, useState } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport {\n  LineChartTypes,\n  MatchSessions,\n  ModdedArenaMatch,\n} from \"../Types/ArenaTypes\";\nimport {\n  createMatchRatingChangeDataSet,\n  createSessionRatingChangeDataSet,\n  getLineChartInputData,\n} from \"../utils/dataSetHelpers\";\nimport dayjs from \"dayjs\";\n\ntype LineChartProps = {\n  selectedArenaMatches: ModdedArenaMatch[];\n  selectedSessions: MatchSessions;\n};\n\nconst LineChart: React.FC<LineChartProps> = ({\n  selectedArenaMatches,\n  selectedSessions,\n}) => {\n  const [chartType, setChartType] = useState<LineChartTypes>(\n    LineChartTypes.perMatch\n  );\n  const toggleChartType = () => {\n    setChartType((prevState) =>\n      prevState === LineChartTypes.perMatch\n        ? LineChartTypes.perSession\n        : LineChartTypes.perMatch\n    );\n  };\n\n  const matchDataset = useMemo(\n    () => createMatchRatingChangeDataSet(selectedArenaMatches),\n    [selectedArenaMatches]\n  );\n  const sessionDataset = useMemo(\n    () => createSessionRatingChangeDataSet(selectedSessions),\n    [selectedSessions]\n  );\n  const { teamRatingArr, teamMMRArr, enemyTeamCompArr, labelArr, winArray } =\n    useMemo(() => getLineChartInputData(matchDataset), [matchDataset]);\n  const {\n    teamRatingArr: teamRatingArrPerSession,\n    labelArr: labelArrPerSession,\n  } = useMemo(() => getLineChartInputData(sessionDataset), [sessionDataset]);\n  const sessionDates = useMemo(\n    () =>\n      Array.from(selectedSessions.keys()).map((timestamp) =>\n        dayjs.unix(timestamp).format(\"DD/MM/YY\")\n      ),\n    [selectedSessions]\n  );\n\n  const ticksConf = {\n    color: \"#292F36\",\n    font: { size: 15, family: \"'Roboto', sans-serif\" },\n    stepSize: 1,\n    beginAtZero: true,\n  };\n\n  const perMatchOptions = {\n    maintainAspectRatio: false,\n    scales: {\n      \"y-axis-1\": {\n        ticks: { ...ticksConf, autoSkip: true, maxTicksLimit: 15 },\n        bounds: \"ticks\",\n        grid: { borderDashOffset: 0.9 },\n      },\n      x: {\n        ticks: { ...ticksConf, autoSkip: true, maxTicksLimit: 20 },\n      },\n    },\n    plugins: {\n      tooltip: {\n        callbacks: {\n          afterLabel: (tooltip: any) => {\n            const index = tooltip.dataIndex;\n            const enemyComp = tooltip.dataset.enemyComp[index];\n            const win = tooltip.dataset.win[index];\n            return [enemyComp, `${win ? \"Win\" : \"Loss\"}`];\n          },\n        },\n      },\n    },\n  };\n  const perMatchData = {\n    labels: labelArr,\n    datasets: [\n      {\n        label: \"New Team Rating\",\n        data: teamRatingArr,\n        enemyComp: enemyTeamCompArr,\n        win: winArray,\n        fill: false,\n        backgroundColor: \"rgb(254,38,0)\",\n        borderColor: \"rgb(254,131,0)\",\n        yAxisID: \"y-axis-1\",\n      },\n      {\n        label: \"MMR\",\n        data: teamMMRArr,\n        enemyComp: enemyTeamCompArr,\n        win: winArray,\n        fill: false,\n        backgroundColor: \"rgb(0,196,255)\",\n        borderColor: \"rgb(0,255,255)\",\n        yAxisID: \"y-axis-1\",\n      },\n    ],\n  };\n  const perSessionOptions = {\n    ...perMatchOptions,\n    plugins: {\n      tooltip: {\n        callbacks: {\n          afterLabel: (tooltip: any) => {\n            console.dir(tooltip);\n            const index = tooltip.dataIndex;\n            const rating = tooltip.dataset.data[index];\n            const dateString = tooltip.dataset.sessionDates[index];\n            return [\n              `Session #${index + 1} - ${dateString}`,\n              `Final session rating: ${rating}`,\n            ];\n          },\n          title: () => \"\",\n          label: () => \"\",\n        },\n      },\n    },\n  };\n  const perSessionData = {\n    labels: labelArrPerSession,\n    datasets: [\n      {\n        label: \"Session end team rating\",\n        data: teamRatingArrPerSession,\n        sessionDates: sessionDates,\n        fill: false,\n        backgroundColor: \"rgb(254,38,0)\",\n        borderColor: \"rgb(254,131,0)\",\n        yAxisID: \"y-axis-1\",\n      },\n    ],\n  };\n\n  const propObject =\n    chartType === LineChartTypes.perMatch\n      ? {\n          data: perMatchData,\n          options: perMatchOptions,\n        }\n      : {\n          data: perSessionData,\n          options: perSessionOptions,\n        };\n\n  return (\n    <div className={\"line-chart-wrap\"}>\n      <div className=\"header\">\n        <button onClick={toggleChartType}>{chartType}</button>\n        <h1 className=\"title\">Team Rating Change</h1>\n      </div>\n      <div className={\"chart-container\"}>\n        <Line data={propObject.data} options={propObject.options} />\n      </div>\n    </div>\n  );\n};\n\nexport default LineChart;\n","import React, {\n  useEffect,\n  useState,\n  useRef,\n  useImperativeHandle,\n  useMemo,\n  forwardRef,\n} from 'react';\n// eslint-disable-next-line no-unused-vars\nimport { Props } from './types';\n\nimport Chart from 'chart.js/auto';\nimport type { ChartData } from 'chart.js';\n\nimport merge from 'lodash/merge';\nimport assign from 'lodash/assign';\nimport find from 'lodash/find';\n\nconst ChartComponent = forwardRef<Chart | undefined, Props>((props, ref) => {\n  const {\n    id,\n    className,\n    height = 150,\n    width = 300,\n    redraw = false,\n    type,\n    data,\n    options = {},\n    plugins = [],\n    getDatasetAtEvent,\n    getElementAtEvent,\n    getElementsAtEvent,\n    fallbackContent,\n    ...rest\n  } = props;\n\n  const canvas = useRef<HTMLCanvasElement>(null);\n\n  const computedData = useMemo<ChartData>(() => {\n    if (typeof data === 'function') {\n      return canvas.current ? data(canvas.current) : {};\n    } else return merge({}, data);\n  }, [data, canvas.current]);\n\n  const [chart, setChart] = useState<Chart>();\n\n  useImperativeHandle<Chart | undefined, Chart | undefined>(ref, () => chart, [\n    chart,\n  ]);\n\n  const renderChart = () => {\n    if (!canvas.current) return;\n\n    setChart(\n      new Chart(canvas.current, {\n        type,\n        data: computedData,\n        options,\n        plugins,\n      })\n    );\n  };\n\n  const onClick = (e: React.MouseEvent<HTMLCanvasElement>) => {\n    if (!chart) return;\n\n    getDatasetAtEvent &&\n      getDatasetAtEvent(\n        chart.getElementsAtEventForMode(\n          e as unknown as Event,\n          'dataset',\n          { intersect: true },\n          false\n        ),\n        e\n      );\n    getElementAtEvent &&\n      getElementAtEvent(\n        chart.getElementsAtEventForMode(\n          e as unknown as Event,\n          'nearest',\n          { intersect: true },\n          false\n        ),\n        e\n      );\n    getElementsAtEvent &&\n      getElementsAtEvent(\n        chart.getElementsAtEventForMode(\n          e as unknown as Event,\n          'index',\n          { intersect: true },\n          false\n        ),\n        e\n      );\n  };\n\n  const updateChart = () => {\n    if (!chart) return;\n\n    if (options) {\n      chart.options = { ...options };\n    }\n\n    if (!chart.config.data) {\n      chart.config.data = computedData;\n      chart.update();\n      return;\n    }\n\n    const { datasets: newDataSets = [], ...newChartData } = computedData;\n    const { datasets: currentDataSets = [] } = chart.config.data;\n\n    // copy values\n    assign(chart.config.data, newChartData);\n\n    chart.config.data.datasets = newDataSets.map((newDataSet: any) => {\n      // given the new set, find it's current match\n      const currentDataSet = find(\n        currentDataSets,\n        d => d.label === newDataSet.label && d.type === newDataSet.type\n      );\n\n      // There is no original to update, so simply add new one\n      if (!currentDataSet || !newDataSet.data) return { ...newDataSet };\n\n      if (!currentDataSet.data) {\n        currentDataSet.data = [];\n      } else {\n        currentDataSet.data.length = newDataSet.data.length;\n      }\n\n      // copy in values\n      assign(currentDataSet.data, newDataSet.data);\n\n      // apply dataset changes, but keep copied data\n      assign(currentDataSet, { ...newDataSet, data: currentDataSet.data });\n      return currentDataSet;\n    });\n\n    chart.update();\n  };\n\n  const destroyChart = () => {\n    if (chart) chart.destroy();\n  };\n\n  useEffect(() => {\n    renderChart();\n\n    return () => destroyChart();\n  }, []);\n\n  useEffect(() => {\n    if (redraw) {\n      destroyChart();\n      setTimeout(() => {\n        renderChart();\n      }, 0);\n    } else {\n      updateChart();\n    }\n  }, [props, computedData]);\n\n  return (\n    <canvas\n      {...rest}\n      height={height}\n      width={width}\n      ref={canvas}\n      id={id}\n      className={className}\n      onClick={onClick}\n      data-testid='canvas'\n      role='img'\n    >\n      {fallbackContent}\n    </canvas>\n  );\n});\n\nexport default ChartComponent;\n","import React, { forwardRef } from 'react';\n// eslint-disable-next-line no-unused-vars\nimport { Props } from './types';\nimport ChartComponent from './chart';\n// eslint-disable-next-line no-unused-vars\nimport Chart from 'chart.js/auto';\nimport * as chartjs from 'chart.js';\n\nexport const Line = forwardRef<Chart | undefined, Omit<Props, 'type'>>((props, ref) => (\n  <ChartComponent\n    {...props}\n    type='line'\n    ref={ref}\n    options={props.options || {}}\n  />\n));\n\nexport const Bar = forwardRef<Chart | undefined, Omit<Props, 'type'>>((props, ref) => (\n  <ChartComponent\n    {...props}\n    type='bar'\n    ref={ref}\n    options={props.options || {}}\n  />\n));\n\nexport const Radar = forwardRef<Chart | undefined, Omit<Props, 'type'>>((props, ref) => (\n  <ChartComponent\n    {...props}\n    type='radar'\n    ref={ref}\n    options={props.options || {}}\n  />\n));\n\nexport const Doughnut = forwardRef<Chart | undefined, Omit<Props, 'type'>>((props, ref) => (\n  <ChartComponent\n    {...props}\n    type='doughnut'\n    ref={ref}\n    options={props.options || {}}\n  />\n));\n\nexport const PolarArea = forwardRef<Chart | undefined, Omit<Props, 'type'>>((props, ref) => (\n  <ChartComponent\n    {...props}\n    type='polarArea'\n    ref={ref}\n    options={props.options || {}}\n  />\n));\n\nexport const Bubble = forwardRef<Chart | undefined, Omit<Props, 'type'>>((props, ref) => (\n  <ChartComponent\n    {...props}\n    type='bubble'\n    ref={ref}\n    options={props.options || {}}\n  />\n));\n\nexport const Pie = forwardRef<Chart | undefined, Omit<Props, 'type'>>((props, ref) => (\n  <ChartComponent\n    {...props}\n    type='pie'\n    ref={ref}\n    options={props.options || {}}\n  />\n));\n\nexport const Scatter = forwardRef<Chart | undefined, Omit<Props, 'type'>>((props, ref) => (\n  <ChartComponent\n    {...props}\n    type='scatter'\n    ref={ref}\n    options={props.options || {}}\n  />\n));\n\nexport const defaults = chartjs.defaults;\n\nexport const Chart = chartjs.Chart;\n\nexport default ChartComponent;\n"],"sourceRoot":""}