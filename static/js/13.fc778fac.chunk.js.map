{"version":3,"sources":["components/SessionSelect.tsx"],"names":["SessionSelect","sessionData","onChange","selectAllOption","useMemo","value","label","useState","selected","setSelected","valueRef","useRef","current","sessionKeys","keys","options","reduce","array","index","formattedData","dayjs","unix","format","push","reverse","isSelectAllSelected","useCallback","length","handleChange","newValue","actionMeta","selectedTimestampArray","action","option","removedValue","map","filteredOptions","filter","useEffect","overlap","el","forEach","val","includes","prevSelected","getValue","placeholder","className","classNamePrefix","isOptionSelected","some","hideSelectedOptions","closeMenuOnSelect","isMulti"],"mappings":"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","file":"static/js/13.fc778fac.chunk.js","sourcesContent":["import React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport { MatchSessions, SessionSelectOption } from \"../Types/ArenaTypes\";\nimport Select, { ActionMeta, MultiValue } from \"react-select\";\nimport dayjs from \"dayjs\";\n\nexport type sessionSelectProps = {\n  sessionData: MatchSessions;\n  onChange: (value: number[]) => void;\n};\n\nconst SessionSelect: React.FC<sessionSelectProps> = ({\n  sessionData,\n  onChange,\n}) => {\n  const selectAllOption: SessionSelectOption = useMemo(\n    () => ({\n      value: 0,\n      label: \"All Sessions\",\n    }),\n    []\n  );\n  const [selected, setSelected] = useState<MultiValue<SessionSelectOption>>([]);\n  const valueRef = useRef(selected);\n  valueRef.current = selected;\n\n  const sessionKeys: number[] = useMemo(\n    () => [...sessionData.keys()],\n    [sessionData]\n  );\n  const options: SessionSelectOption[] = useMemo(() => {\n    return sessionKeys\n      .reduce((array, current, index) => {\n        const formattedData: string = dayjs.unix(current).format(\"DD/MM/YY\"); //\"HH:mm - DD/MM/YY\"\n        array.push({\n          value: current,\n          label: `Session ${index + 1} - ${formattedData}`,\n        });\n        return array;\n      }, [] as SessionSelectOption[])\n      .reverse();\n  }, [sessionKeys]);\n\n  const isSelectAllSelected = useCallback(() => {\n    return valueRef?.current?.length === options.length;\n  }, [options.length]);\n\n  const handleChange = useCallback(\n    (\n      newValue: MultiValue<SessionSelectOption>,\n      actionMeta: ActionMeta<SessionSelectOption>\n    ) => {\n      const selectedTimestampArray: number[] = [];\n      const { action, option, removedValue } = actionMeta;\n      if (\n        action === \"select-option\" &&\n        option?.value === selectAllOption.value\n      ) {\n        setSelected(options);\n        selectedTimestampArray.push(...options.map((option) => option.value));\n      } else if (\n        (action === \"deselect-option\" &&\n          option?.value === selectAllOption.value) ||\n        (action === \"remove-value\" &&\n          removedValue?.value === selectAllOption.value)\n      ) {\n        setSelected([]);\n      } else if (\n        actionMeta.action === \"deselect-option\" &&\n        isSelectAllSelected()\n      ) {\n        const filteredOptions = options.filter(\n          ({ value }) => value !== option?.value\n        );\n        setSelected(filteredOptions);\n        selectedTimestampArray.push(\n          ...filteredOptions.map((option) => option.value)\n        );\n      } else {\n        setSelected(newValue || []);\n        selectedTimestampArray.push(...newValue.map((option) => option.value));\n      }\n      onChange && onChange(selectedTimestampArray);\n    },\n    [isSelectAllSelected, onChange, options, selectAllOption.value]\n  );\n\n  useEffect(() => {\n    // Resets selected to empty arr, if selected value wasn't within session keys\n    if (selected.length) {\n      let overlap = true;\n      const selectedValues = selected.map((el) => el.value);\n      selectedValues.forEach((val) => {\n        if (!sessionKeys.includes(val)) {\n          overlap = false;\n        }\n      });\n      if (!overlap) {\n        setSelected([]);\n      }\n    }\n  }, [selected, sessionKeys]);\n\n  useEffect(() => {\n    if (options.length) {\n      setSelected((prevSelected) => (!prevSelected ? [options[0]] : []));\n    }\n    handleChange([options[0]], {\n      action: \"select-option\",\n      option: options[0],\n    });\n  }, [options, handleChange]);\n\n  const isOptionSelected = (option: SessionSelectOption): boolean => {\n    return (\n      isSelectAllSelected() ||\n      valueRef?.current?.some(({ value }) => value === option.value)\n    );\n  };\n\n  const getValue = useCallback(() => {\n    return isSelectAllSelected() ? [selectAllOption] : selected;\n  }, [isSelectAllSelected, selectAllOption, selected]);\n\n  return (\n    <Select\n      placeholder={\"Select session...\"}\n      className={\"session-select\"}\n      classNamePrefix={\"session-select\"}\n      isOptionSelected={isOptionSelected}\n      options={[selectAllOption, ...options]}\n      value={getValue()}\n      onChange={handleChange}\n      hideSelectedOptions={false}\n      closeMenuOnSelect={false}\n      isMulti\n    />\n  );\n};\n\nexport default SessionSelect;\n"],"sourceRoot":""}