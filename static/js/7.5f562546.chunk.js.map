{"version":3,"sources":["components/MatchupChart.tsx","../../src/chart.tsx","../../src/index.tsx"],"names":["ticksConf","color","font","size","family","stepSize","beginAtZero","MatchupChart","selectedArenaMatches","useState","MatchupChartTypes","teamComps","chartType","setChartType","useMemo","createMatchupDataSet","teamCompsDataset","classDistributionDataset","getTeamCompsChartInputData","totalMatchNumber","totalWins","totalLosses","totalWinrate","labelArr","dataArr","winsArr","zoneStatsArr","performanceStatsArr","colorArray","getClassDistributionChartInputData","classLabels","labels","totalClassData","totalData","inMatchesClassData","inMatchesData","classColorArray","teamCompOptions","maintainAspectRatio","indexAxis","responsive","scales","y","ticks","x","plugins","tooltip","callbacks","afterLabel","formatTeamCompsChartTooltip","label","value","formattedValue","legend","display","teamCompData","datasets","data","wins","zoneStats","performanceStats","backgroundColor","borderColor","borderWidth","hoverOffset","classDistributionOptions","formatClassDistributionChartTooltip","classDistributionData","totalClassCount","reduce","prev","next","chartTitle","chartData","chartOptions","className","onClick","prevState","classes","options","ChartComponent","forwardRef","id","props","height","width","redraw","type","getDatasetAtEvent","getElementAtEvent","getElementsAtEvent","fallbackContent","rest","canvas","useRef","computedData","merge","chart","setChart","useImperativeHandle","renderChart","destroyChart","useEffect","setTimeout","newDataSets","newChartData","currentDataSets","assign","currentDataSet","find","d","newDataSet","updateChart","ref","e","intersect","role","Line","Bar","chartjs"],"mappings":"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","file":"static/js/7.5f562546.chunk.js","sourcesContent":["import React, { useMemo, useState } from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport {\n  TeamCompData,\n  MatchupChartTypes,\n  ModdedArenaMatch,\n  ClassDistributionData,\n} from \"../Types/ArenaTypes\";\nimport {\n  createMatchupDataSet,\n  formatClassDistributionChartTooltip,\n  formatTeamCompsChartTooltip,\n  getClassDistributionChartInputData,\n  getTeamCompsChartInputData,\n} from \"../utils/dataSetHelpers\";\n\nconst ticksConf = {\n  color: \"#292F36\",\n  font: { size: 15, family: \"'Roboto', sans-serif\" },\n  stepSize: 1,\n  beginAtZero: true,\n};\n\ntype BarChartProps = {\n  selectedArenaMatches: ModdedArenaMatch[];\n};\n\nconst MatchupChart: React.FC<BarChartProps> = ({ selectedArenaMatches }) => {\n  const [chartType, setChartType] = useState<MatchupChartTypes>(\n    MatchupChartTypes.teamComps\n  );\n  const toggleChartType = () => {\n    setChartType((prevState) =>\n      prevState === MatchupChartTypes.classes\n        ? MatchupChartTypes.teamComps\n        : MatchupChartTypes.classes\n    );\n  };\n  const { teamCompsDataset, classDistributionDataset } = useMemo(\n    () => createMatchupDataSet(selectedArenaMatches),\n    [selectedArenaMatches]\n  );\n  const {\n    totalMatchNumber,\n    totalWins,\n    totalLosses,\n    totalWinrate,\n    labelArr,\n    dataArr,\n    winsArr,\n    zoneStatsArr,\n    performanceStatsArr,\n    colorArray,\n  } = useMemo(\n    () => getTeamCompsChartInputData(teamCompsDataset),\n    [teamCompsDataset]\n  );\n  const {\n    labels: classLabels,\n    totalData: totalClassData,\n    inMatchesData: inMatchesClassData,\n    colorArray: classColorArray,\n  } = useMemo(\n    () => getClassDistributionChartInputData(classDistributionDataset),\n    [classDistributionDataset]\n  );\n\n  const teamCompOptions: any = useMemo(\n    () => ({\n      maintainAspectRatio: false,\n      indexAxis: \"y\",\n      responsive: true,\n      scales: {\n        y: {\n          ticks: ticksConf,\n        },\n        x: {\n          ticks: ticksConf,\n        },\n      },\n      plugins: {\n        tooltip: {\n          callbacks: {\n            afterLabel: formatTeamCompsChartTooltip,\n            label: (tooltip: any) => {\n              const value = tooltip.formattedValue;\n              return `Total: ${value}`;\n            },\n          },\n        },\n        legend: {\n          display: false,\n        },\n      },\n    }),\n    []\n  );\n  const teamCompData: TeamCompData = useMemo(\n    () => ({\n      labels: labelArr,\n      datasets: [\n        {\n          label: \"\",\n          data: dataArr,\n          wins: winsArr,\n          zoneStats: zoneStatsArr,\n          performanceStats: performanceStatsArr,\n          backgroundColor: colorArray,\n          borderColor: [],\n          borderWidth: 1,\n          hoverOffset: 6,\n        },\n      ],\n    }),\n    [colorArray, dataArr, labelArr, performanceStatsArr, winsArr, zoneStatsArr]\n  );\n  const classDistributionOptions: any = useMemo(\n    () => ({\n      maintainAspectRatio: false,\n      indexAxis: \"y\",\n      responsive: true,\n      scales: {\n        y: {\n          ticks: ticksConf,\n        },\n        x: {\n          ticks: ticksConf,\n        },\n      },\n      plugins: {\n        tooltip: {\n          callbacks: {\n            afterLabel: formatClassDistributionChartTooltip,\n            label: (tooltip: any) => {\n              const value = tooltip.formattedValue;\n              return `Total: ${value}`;\n            },\n          },\n        },\n        legend: {\n          display: false,\n        },\n      },\n    }),\n    []\n  );\n  const classDistributionData: ClassDistributionData = useMemo(\n    () => ({\n      labels: classLabels,\n      datasets: [\n        {\n          label: \"\",\n          data: totalClassData,\n          inMatchesData: inMatchesClassData,\n          totalClassCount: totalClassData.reduce(\n            (prev, next) => prev + next,\n            0\n          ),\n          totalMatchNumber: totalMatchNumber,\n          backgroundColor: classColorArray,\n          borderColor: [],\n          borderWidth: 1,\n          hoverOffset: 6,\n        },\n      ],\n    }),\n    [\n      classLabels,\n      totalClassData,\n      inMatchesClassData,\n      totalMatchNumber,\n      classColorArray,\n    ]\n  );\n\n  const chartTitle: string = `Matches Played: ${totalMatchNumber}, Wins: ${totalWins}, Losses: ${totalLosses}, WR: ${totalWinrate}%,`;\n  const chartData =\n    chartType === MatchupChartTypes.teamComps\n      ? teamCompData\n      : classDistributionData;\n  const chartOptions =\n    chartType === MatchupChartTypes.teamComps\n      ? teamCompOptions\n      : classDistributionOptions;\n\n  return (\n    <div className={\"matchup-chart-wrap\"}>\n      <div className=\"header\">\n        <button onClick={toggleChartType}>{chartType}</button>\n        <h1 className=\"title\">{chartTitle}</h1>\n      </div>\n      <div className={\"chart-container\"}>\n        <Bar data={chartData} options={chartOptions} />\n      </div>\n    </div>\n  );\n};\n\nexport default MatchupChart;\n","import React, {\n  useEffect,\n  useState,\n  useRef,\n  useImperativeHandle,\n  useMemo,\n  forwardRef,\n} from 'react';\n// eslint-disable-next-line no-unused-vars\nimport { Props } from './types';\n\nimport Chart from 'chart.js/auto';\nimport type { ChartData } from 'chart.js';\n\nimport merge from 'lodash/merge';\nimport assign from 'lodash/assign';\nimport find from 'lodash/find';\n\nconst ChartComponent = forwardRef<Chart | undefined, Props>((props, ref) => {\n  const {\n    id,\n    className,\n    height = 150,\n    width = 300,\n    redraw = false,\n    type,\n    data,\n    options = {},\n    plugins = [],\n    getDatasetAtEvent,\n    getElementAtEvent,\n    getElementsAtEvent,\n    fallbackContent,\n    ...rest\n  } = props;\n\n  const canvas = useRef<HTMLCanvasElement>(null);\n\n  const computedData = useMemo<ChartData>(() => {\n    if (typeof data === 'function') {\n      return canvas.current ? data(canvas.current) : {};\n    } else return merge({}, data);\n  }, [data, canvas.current]);\n\n  const [chart, setChart] = useState<Chart>();\n\n  useImperativeHandle<Chart | undefined, Chart | undefined>(ref, () => chart, [\n    chart,\n  ]);\n\n  const renderChart = () => {\n    if (!canvas.current) return;\n\n    setChart(\n      new Chart(canvas.current, {\n        type,\n        data: computedData,\n        options,\n        plugins,\n      })\n    );\n  };\n\n  const onClick = (e: React.MouseEvent<HTMLCanvasElement>) => {\n    if (!chart) return;\n\n    getDatasetAtEvent &&\n      getDatasetAtEvent(\n        chart.getElementsAtEventForMode(\n          e as unknown as Event,\n          'dataset',\n          { intersect: true },\n          false\n        ),\n        e\n      );\n    getElementAtEvent &&\n      getElementAtEvent(\n        chart.getElementsAtEventForMode(\n          e as unknown as Event,\n          'nearest',\n          { intersect: true },\n          false\n        ),\n        e\n      );\n    getElementsAtEvent &&\n      getElementsAtEvent(\n        chart.getElementsAtEventForMode(\n          e as unknown as Event,\n          'index',\n          { intersect: true },\n          false\n        ),\n        e\n      );\n  };\n\n  const updateChart = () => {\n    if (!chart) return;\n\n    if (options) {\n      chart.options = { ...options };\n    }\n\n    if (!chart.config.data) {\n      chart.config.data = computedData;\n      chart.update();\n      return;\n    }\n\n    const { datasets: newDataSets = [], ...newChartData } = computedData;\n    const { datasets: currentDataSets = [] } = chart.config.data;\n\n    // copy values\n    assign(chart.config.data, newChartData);\n\n    chart.config.data.datasets = newDataSets.map((newDataSet: any) => {\n      // given the new set, find it's current match\n      const currentDataSet = find(\n        currentDataSets,\n        d => d.label === newDataSet.label && d.type === newDataSet.type\n      );\n\n      // There is no original to update, so simply add new one\n      if (!currentDataSet || !newDataSet.data) return { ...newDataSet };\n\n      if (!currentDataSet.data) {\n        currentDataSet.data = [];\n      } else {\n        currentDataSet.data.length = newDataSet.data.length;\n      }\n\n      // copy in values\n      assign(currentDataSet.data, newDataSet.data);\n\n      // apply dataset changes, but keep copied data\n      assign(currentDataSet, { ...newDataSet, data: currentDataSet.data });\n      return currentDataSet;\n    });\n\n    chart.update();\n  };\n\n  const destroyChart = () => {\n    if (chart) chart.destroy();\n  };\n\n  useEffect(() => {\n    renderChart();\n\n    return () => destroyChart();\n  }, []);\n\n  useEffect(() => {\n    if (redraw) {\n      destroyChart();\n      setTimeout(() => {\n        renderChart();\n      }, 0);\n    } else {\n      updateChart();\n    }\n  }, [props, computedData]);\n\n  return (\n    <canvas\n      {...rest}\n      height={height}\n      width={width}\n      ref={canvas}\n      id={id}\n      className={className}\n      onClick={onClick}\n      data-testid='canvas'\n      role='img'\n    >\n      {fallbackContent}\n    </canvas>\n  );\n});\n\nexport default ChartComponent;\n","import React, { forwardRef } from 'react';\n// eslint-disable-next-line no-unused-vars\nimport { Props } from './types';\nimport ChartComponent from './chart';\n// eslint-disable-next-line no-unused-vars\nimport Chart from 'chart.js/auto';\nimport * as chartjs from 'chart.js';\n\nexport const Line = forwardRef<Chart | undefined, Omit<Props, 'type'>>((props, ref) => (\n  <ChartComponent\n    {...props}\n    type='line'\n    ref={ref}\n    options={props.options || {}}\n  />\n));\n\nexport const Bar = forwardRef<Chart | undefined, Omit<Props, 'type'>>((props, ref) => (\n  <ChartComponent\n    {...props}\n    type='bar'\n    ref={ref}\n    options={props.options || {}}\n  />\n));\n\nexport const Radar = forwardRef<Chart | undefined, Omit<Props, 'type'>>((props, ref) => (\n  <ChartComponent\n    {...props}\n    type='radar'\n    ref={ref}\n    options={props.options || {}}\n  />\n));\n\nexport const Doughnut = forwardRef<Chart | undefined, Omit<Props, 'type'>>((props, ref) => (\n  <ChartComponent\n    {...props}\n    type='doughnut'\n    ref={ref}\n    options={props.options || {}}\n  />\n));\n\nexport const PolarArea = forwardRef<Chart | undefined, Omit<Props, 'type'>>((props, ref) => (\n  <ChartComponent\n    {...props}\n    type='polarArea'\n    ref={ref}\n    options={props.options || {}}\n  />\n));\n\nexport const Bubble = forwardRef<Chart | undefined, Omit<Props, 'type'>>((props, ref) => (\n  <ChartComponent\n    {...props}\n    type='bubble'\n    ref={ref}\n    options={props.options || {}}\n  />\n));\n\nexport const Pie = forwardRef<Chart | undefined, Omit<Props, 'type'>>((props, ref) => (\n  <ChartComponent\n    {...props}\n    type='pie'\n    ref={ref}\n    options={props.options || {}}\n  />\n));\n\nexport const Scatter = forwardRef<Chart | undefined, Omit<Props, 'type'>>((props, ref) => (\n  <ChartComponent\n    {...props}\n    type='scatter'\n    ref={ref}\n    options={props.options || {}}\n  />\n));\n\nexport const defaults = chartjs.defaults;\n\nexport const Chart = chartjs.Chart;\n\nexport default ChartComponent;\n"],"sourceRoot":""}