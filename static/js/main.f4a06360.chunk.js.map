{"version":3,"sources":["utils/stateManagement.tsx","utils/dataSetHelpers.tsx","components/UploadArea.tsx","utils/ArrayBuffer-StringHelper.tsx","utils/parseData.tsx","utils/sessionManagement.tsx","components/SessionSelect.tsx","components/TeamSelect.tsx","components/ButtonGroup.tsx","utils/colorGeneration.tsx","components/BarChart.tsx","components/LineChart.tsx","components/ChartWrapper.tsx","components/Dashboard.tsx","utils/teamManagement.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["INSTANCE_DATA","setLocalStorageField","key","data","localStorage","setItem","JSON","stringify","DISCONNECTED","DC_TEAM_NAME","ARENA_INSTANCE_IDS","PLAYER_KEYS","CHART_TYPES","getModdedArenaMatches","modifiedData","forEach","match","moddedMatch","enteredTime","instanceID","instanceName","playerName","enemyTeamComp","myTeamComp","myTeamName","bracket","myTeam","enemyTeam","win","moddedMatchData","myCharName","goldTeam","hasOwnProperty","teamName","purpleTeam","winningFaction","myTeamNames","Object","keys","enemyTeamNames","myTeamPlayerCount","length","enemyTeamPlayerCount","Math","max","arenaBracket","i","push","fillNameArraysWithBlanks","myModdedTeam","enemyModdedTeam","name","idx","getModdedTeamsAndTeamComps","sort","getModdedArenaData","assign","player1","teamMMR","matchArrayFromSelectedSessions","sessionData","filteredMatches","session","teamObj","moddedTeamObj","compArr","playerDCed","class","createRatingChangeDataSet","dataset","arr","timestamp","newTeamRating","player","RatingChangeObject","teamcompArrToString","fillRatingChangeArray","fillTeamCompObject","obj","DC_MATCH","TeamPerformanceStats","healing","damage","currentStats","currentMatchStats","entry","matchCount","wins","zoneStats","matches","Number","performanceStats","reduce","a","b","concat","UploadArea","localStoreChangeHandler","localStorageChangeValue","useState","text","setText","onDrop","useCallback","acceptedFiles","file","console","dir","reader","FileReader","onabort","onerror","onload","buf","binaryStr","result","filteredData","state","window","getItem","parsedState","parse","mergedState","filteredState","Map","map","item","values","mergeState","start","lastIndexOf","newStr","slice","enumRegexp","RegExp","instanceDataArray","replaceAll","split","parsedData","el","e","parseData","TextDecoder","decode","Uint8Array","filter","includes","String","readAsArrayBuffer","useDropzone","getRootProps","getInputProps","className","dayjs","extend","isBetween","SessionSelect","onChange","selectAllOption","value","label","selected","setSelected","valueRef","useRef","current","useEffect","overlap","sessionDataKeys","val","sessionKeys","options","formattedData","unix","format","sessionOption","reverse","isSelectAllSelected","classNamePrefix","defaultValue","isOptionSelected","option","some","newValue","actionMeta","selectedTimestampArray","action","removedValue","filteredOptions","hideSelectedOptions","closeMenuOnSelect","isMulti","TeamSelect","teams","team","handleChange","ButtonGroup","buttonLabels","buttons","isClicked","onClick","event","handleClick","calculatePoint","index","intervalSize","colorRangeInfo","colorStart","colorEnd","useEndAsStart","calcWinrate","toFixed","BarChart","totalLosses","totalWinrate","totalMatchNumber","totalWins","labelArr","dataArr","winsArr","zoneStatsArr","performanceStatsArr","colorArray","ticksConf","color","font","size","family","stepSize","beginAtZero","maintainAspectRatio","indexAxis","responsive","scales","y","ticks","x","plugins","tooltip","callbacks","afterLabel","dataIndex","winrate","zoneStatsStringArr","performanceStatsStringArr","avgDamage","avgHealing","toLocaleString","legend","display","labels","datasets","backgroundColor","borderColor","borderWidth","hoverOffset","sortableEntries","teamComp","dataLength","colorScale","targetArray","colorPoint","generateChartColors","interpolateTurbo","chartTitle","LineChart","teamRatingArr","teamMMRArr","enemyTeamCompArr","winArray","enemyComp","fill","yAxisID","ChartWrapper","sessionSelection","chartType","chartDataset","setChartDataset","localChartType","setLocalChartType","selectedSessionData","selectedMatches","sessionKey","get","set","enemyTeamCompString","createTeamCompDataSet","Dashboard","setModdedMatchData","myTeams","setMyTeams","myTeamSelection","setMyTeamSelection","setSessionData","setSessionSelection","setChartType","localStorageChanged","setLocalStorageChanged","localStorageMatchState","Set","selectedTeam","filteredMatchData","matchSessions","prevMatch","every","prevMatchEnterTime","add","getSessions","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+NAGaA,EAAgB,eA6BtB,SAASC,EAAqBC,EAAaC,GAChDC,aAAaC,QAAQH,EAAKI,KAAKC,UAAUJ,I,aCpBrCK,EAAe,gBACfC,EAAe,OAERC,GAAkB,mBAC5B,IAAgB,sBADY,cAE5B,IAAgB,sBAFY,cAG5B,IAAgB,iBAHY,GAKzBC,EAAiC,CACrC,UACA,UACA,UACA,UACA,WAEWC,EAAc,CAAC,aAAc,iBAWnC,SAASC,EAAsBV,GACpC,IAAMW,EAAmC,GA6BzC,OA5BAX,EAAKY,SAAQ,SAACC,GAAW,IAAD,IAChBC,EAAgC,CACpCC,YAAaF,EAAME,YACnBC,WAAYH,EAAMG,WAClBC,aAAcJ,EAAMI,aACpBC,WAAYL,EAAMK,WAClBC,cAAe,GACfC,WAAY,GACZC,WAAY,GACZC,QAAS,EACTC,OAAQ,GACRC,UAAW,GACXC,KAAK,GAGDC,EAsCV,SAA4Bb,GAC1B,IAAIU,EAAmBC,EAAsBC,EAAcJ,EACrDM,EAAad,EAAMK,WACrBL,EAAMe,SAASC,eAAeF,IAChCJ,EAASV,EAAMe,SACfP,EAAaR,EAAMe,SAASD,GAAYG,SACxCN,EAAYX,EAAMkB,WAClBN,IAAQZ,EAAMmB,iBAEdT,EAASV,EAAMkB,WACfV,EAAaR,EAAMkB,WAAWJ,GAAYG,SAC1CN,EAAYX,EAAMe,SAClBH,GAAOZ,EAAMmB,gBAGf,IAAMC,EAAwBC,OAAOC,KAAKZ,GACpCa,EAA2BF,OAAOC,KAAKX,GACvCa,EAAoBJ,EAAYK,OAChCC,EAAuBH,EAAeE,OACtChB,EAAUkB,KAAKC,IAAIJ,EAAmBE,IAgD9C,SACEN,EACAG,EACAM,GAEA,GAAIT,EAAYK,OAASI,EACvB,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAeT,EAAYK,OAAQK,IACrDV,EAAYW,KAAKtC,GAGrB,GAAI8B,EAAeE,OAASI,EAC1B,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAeN,EAAeE,OAAQK,IACxDP,EAAeQ,KAAKtC,GA3DxBuC,CAAyBZ,EAAaG,EAAgBd,GAGtD,IAAIwB,EAAgC,GAChC1B,EAAuB,GACvB2B,EAAmC,GACnC5B,EAA0B,GAa9B,OAZAc,EAAYrB,SAAQ,SAACoC,EAAMC,GAAP,OAClBC,EAA2BF,EAAMC,EAAK1B,EAAQuB,EAAc1B,MAE9DgB,EAAexB,SAAQ,SAACoC,EAAMC,GAAP,OACrBC,EACEF,EACAC,EACAzB,EACAuB,EACA5B,MAGG,CACLG,UACAG,MACAJ,aACAE,OAAQuB,EACR1B,WAAYA,EAAW+B,OACvB3B,UAAWuB,EACX5B,cAAeA,EAAcgC,QApFLC,CAAmBvC,GAC3CqB,OAAOmB,OAAOvC,EAAaY,GAKiB,KAAxC,UAAAZ,EAAYS,OAAO+B,eAAnB,eAA4BC,UACe,KAA3C,UAAAzC,EAAYU,UAAU8B,eAAtB,eAA+BC,UAGjC5C,EAAaiC,KAAK9B,MAGfH,EAaF,SAAS6C,EACdC,GAEA,IAAMC,EAAsC,GAM5C,OAJAD,EAAY7C,SAAQ,SAAC+C,GACnBD,EAAgBd,KAAhB,MAAAc,EAAe,YAASC,OAGnBD,EAqDT,SAASR,EACPF,EACAC,EACAW,EACAC,EACAC,GAEA,IAAMC,EAAaf,IAAS1C,EAC5BuD,EAAcrD,EAAYyC,IAAQc,EAC9B,KADwC,aAGtCf,KAAMA,GACHY,EAAQZ,IAEjBc,EAAQlB,KAAKmB,EAAa1D,EAAeuD,EAAQZ,GAAMgB,OAuClD,SAASC,EACdjE,GAEA,IAAMkE,EAA+B,GAKrC,OAJAlE,EAAKY,SAAQ,SAACC,IA8DhB,SACEsD,EACAtD,GAKA,IAJO,IACcuD,EAAmDvD,EAAhEE,YAAwBI,EAAwCN,EAAxCM,cAAeI,EAAyBV,EAAzBU,OAAQD,EAAiBT,EAAjBS,QAASG,EAAQZ,EAARY,IAC5D4C,GAAiB,EACjBd,GAAW,EACNZ,EAAI,EAAGA,EAAIrB,EAASqB,IAAK,CAChC,IAAM2B,EAAS/C,EAAOf,EAAYmC,IAC9B2B,IACFD,EAAgBC,EAAOD,cACvBd,EAAUe,EAAOf,SAGrB,IAAMgB,EAAsC,CAC1CH,YACAC,gBACAd,UACA9B,MACAN,cAAeqD,EAAoBrD,IAErCgD,EAAIvB,KAAK2B,GAlFPE,CAAsBP,EAASrD,MAG1BqD,EAGT,SAASQ,EACPC,EACA5E,EACAc,GAEA,IAAM+D,EAAmB,OAAR7E,EACTiB,EAAqCH,EAArCG,WAAYO,EAAyBV,EAAzBU,OAAQE,EAAiBZ,EAAjBY,IAAKH,EAAYT,EAAZS,QAE3BuD,EAA6C,GACnD,IAAKD,EACH,IAAK,IAAIjC,EAAI,EAAGA,EAAIrB,EAASqB,IAAK,CAChC,IAAM2B,EAAS/C,EAAOf,EAAYmC,IAC9B2B,EACFO,EAAqBP,EAAOtB,MAAQ,CAClC8B,QAASR,EAAOQ,QAChBC,OAAQT,EAAOS,QAGjBF,EAAoB,GAAS,CAAEC,QAAS,EAAGC,OAAQ,GAKzD,IA6DAC,EACAC,EA9DMC,EAAQP,EAAI5E,GAEdmF,GAEFA,EAAMC,YAAc,EAChB1D,GACFyD,EAAME,OAIJF,EAAMG,UAAUrE,IAClBkE,EAAMG,UAAUrE,GAAYsE,UACxB7D,GACFyD,EAAMG,UAAUrE,GAAYoE,QAG9BF,EAAMG,UAAUrE,GAAc,CAAEsE,QAAS,EAAGF,KAAMG,OAAO9D,KAI1DmD,IAyCHI,EAxCgCE,EAAMM,iBAyCtCP,EAzCwDJ,EA2CxD3C,OAAOC,KAAK6C,GAAcpE,SAAQ,SAAC0D,GACjCU,EAAaV,GAAQQ,SAAWG,EAAkBX,GAAQQ,QAC1DE,EAAaV,GAAQS,QAAUE,EAAkBX,GAAQS,YA3CzDJ,EAAI5E,GAAO,CACToF,WAAY,EACZC,KAAMG,OAAO9D,GACb+D,iBAAkBX,EAClBQ,UAAU,eAAIrE,EAAa,CAAEsE,QAAS,EAAGF,KAAMG,OAAO9D,MA6B5D,SAAS+C,EAAoBL,GAC3B,OAAOA,EAAIsB,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,OAAO,OAAQD,M,WCjPhCE,EAnC4B,SAAC,GAGrC,IAFLC,EAEI,EAFJA,wBACAC,EACI,EADJA,wBACI,EACoBC,mBAAS,oBAD7B,mBACGC,EADH,KACSC,EADT,KAGEC,EAASC,uBACb,SAACC,GACCA,EAAczF,SAAQ,SAAC0F,GACrBC,QAAQC,IAAIH,GAEZ,IAAMI,EAAS,IAAIC,WAEnBD,EAAOE,QAAU,kBAAMT,EAAQ,6BAC/BO,EAAOG,QAAU,kBAAMV,EAAQ,wBAC/BO,EAAOI,OAAS,WACd,IDEqB7G,EE9BK8G,ED4BpBC,EAAYN,EAAOO,QFtB5B,SAAoBC,GACzB,IACMC,EAAQC,OAAOlH,aAAamH,QAAQvH,GAE1C,GAAKqH,EAAL,CAIA,IAAMG,EAAclH,KAAKmH,MAAMJ,GACzBK,EAAW,sBAAOF,GAAP,YAAuBJ,IAElCO,EAAa,YACd,IAAIC,IAAIF,EAAYG,KAAI,SAACC,GAAD,MAAU,CAACA,EAAI,YAAaA,OAAQC,UAGjE9H,EAAqBD,EAAe2H,QAVlC1H,EAAqBD,EAAeoH,GEkB9BY,EDCqB7H,EG5BN,SAACA,GAExB,IAAM8H,EAAQ9H,EAAK+H,YAAY,oBAAsB,GAC/CC,EAAShI,EAAKiI,MAAMH,GAGpBI,EAAa,IAAIC,OAAO,eAAgB,KACxCC,EAAoBJ,EACvBK,WAAW,KAAM,IACjBA,WAAW,KAAM,IACjBA,WAAW,KAAM,IACjBA,WAAW,KAAM,KACjBA,WAAW,KAAM,KACjBA,WAAW,MAAO,KAClBA,WAAW,KAAM,KACjBC,MAAMJ,GAGLK,EAA2B,GAS/B,OARAH,EAAkBxH,SAAQ,SAAC4H,EAAIvF,GAC7B,IACEsF,EAAW3F,KAAKzC,KAAKmH,MAAMkB,IAC3B,MAAOC,QAKJF,EFA2BG,EC7BA5B,ED6B8BC,EC5BpD,OAARD,GAA+B,kBAARA,EAClB,kBAOC,IAAI6B,aAAcC,OAAO,IAAIC,WAAW/B,MFsB3C9G,EAAK8I,QACV,SAACjI,GAAD,OACEqB,OAAOC,KAAK5B,GAAoBwI,SAASC,OAAOnI,EAAMG,cACtDH,EAAMgB,eAAe,eACrBhB,EAAMgB,eAAe,iBCLjBiE,GAAyBC,GACzBG,EAAQ,6BAEVO,EAAOwC,kBAAkB3C,QAG7B,CAACR,EAAyBC,IArBxB,EAuBoCmD,YAAY,CAAE/C,WAA9CgD,EAvBJ,EAuBIA,aAAcC,EAvBlB,EAuBkBA,cACtB,OACE,gDAASD,KAAT,IAAyBE,UAAU,cAAnC,UACE,qCAAWD,MACX,4BAAInD,S,kCGvCVqD,IAAMC,OAAOC,K,YC8GEC,EAvGqC,SAAC,GAG9C,IAFLhG,EAEI,EAFJA,YACAiG,EACI,EADJA,SAEMC,EAAuC,CAC3CC,MAAO,EACPC,MAAO,YAHL,EAK4B7D,mBAA0C,IALtE,mBAKG8D,EALH,KAKaC,EALb,KAMEC,EAAWC,iBAAOH,GACxBE,EAASE,QAAUJ,EAEnBK,qBAAU,WACR,GAAIL,EAASxH,OAAQ,CACnB,IAAI8H,GAAU,EACRC,EAAe,YAAO5G,EAAYtB,QACjB2H,EAASpC,KAAI,SAACc,GAAD,OAAQA,EAAGoB,SAChChJ,SAAQ,SAAC0J,GACjBD,EAAgBtB,SAASuB,KAC5BF,GAAU,MAGTA,GACHL,EAAY,OAGf,CAACD,EAAUrG,IAEd,IAAM8G,EAAqB,YAAO9G,EAAYtB,QAExCqI,EAAiC,GACvCD,EAAY3J,SAAQ,SAACb,EAAKkD,GACxB,IAAMwH,EAAwBnB,IAAMoB,KAAK3K,GAAK4K,OAAO,oBAC/CC,EAAgB,CACpBhB,MAAO7J,EACP8J,MAAM,WAAD,OAAa5G,EAAM,EAAnB,eAA2BwH,IAElCD,EAAQ5H,KAAKgI,MAEfJ,EAAQK,UAER,IAAMC,EAAsB,WAAO,IAAD,EAChC,OAAe,OAARd,QAAQ,IAARA,GAAA,UAAAA,EAAUE,eAAV,eAAmB5H,UAAWkI,EAAQlI,QA6C/C,OACE,cAAC,IAAD,CACE+G,UAAW,iBACX0B,gBAAiB,iBACjBC,aAAcrB,EACdsB,iBA7CqB,SAACC,GAAD,aACf,OAARlB,QAAQ,IAARA,GAAA,UAAAA,EAAUE,eAAV,eAAmBiB,MAAK,qBAAGvB,QAAsBsB,EAAOtB,WACxDkB,KA4CEN,QAhDe,CAAOb,GAAP,OAA2Ba,GAiD1CZ,MA3CoBkB,IAAwB,CAACnB,GAAmBG,EA4ChEJ,SA1CiB,SACnB0B,EACAC,GAEA,IAAMC,EAAmC,GACjCC,EAAiCF,EAAjCE,OAAQL,EAAyBG,EAAzBH,OAAQM,EAAiBH,EAAjBG,aACxB,GAAe,kBAAXD,IAAoC,OAANL,QAAM,IAANA,OAAA,EAAAA,EAAQtB,SAAUD,EAAgBC,MAClEG,EAAYS,GACZc,EAAuB1I,KAAvB,MAAA0I,EAAsB,YAASd,EAAQ9C,KAAI,SAACwD,GAAD,OAAYA,EAAOtB,gBACzD,GACO,oBAAX2B,IACO,OAANL,QAAM,IAANA,OAAA,EAAAA,EAAQtB,SAAUD,EAAgBC,OACxB,iBAAX2B,IACa,OAAZC,QAAY,IAAZA,OAAA,EAAAA,EAAc5B,SAAUD,EAAgBC,MAE1CG,EAAY,SACP,GACiB,oBAAtBsB,EAAWE,QACXT,IACA,CACA,IAAMW,EAAkBjB,EAAQ1B,QAC9B,qBAAGc,SAAiB,OAAKsB,QAAL,IAAKA,OAAL,EAAKA,EAAQtB,UAEnCG,EAAY0B,GACZH,EAAuB1I,KAAvB,MAAA0I,EAAsB,YACjBG,EAAgB/D,KAAI,SAACwD,GAAD,OAAYA,EAAOtB,gBAG5CG,EAAYqB,GAAY,IACxBE,EAAuB1I,KAAvB,MAAA0I,EAAsB,YAASF,EAAS1D,KAAI,SAACwD,GAAD,OAAYA,EAAOtB,WAEjEF,GAAYA,EAAS4B,IAYnBI,qBAAqB,EACrBC,mBAAmB,EACnBC,SAAO,KCnGb,IA4BeC,EA5B+B,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOpC,EAAe,EAAfA,SAAe,EACrC1D,qBADqC,mBAC9D8D,EAD8D,KACpDC,EADoD,KAE/DS,EAA8BsB,EAAMpE,KAAI,SAACqE,GAAD,MAAW,CACvDnC,MAAOmC,EACPlC,MAAOkC,MAEHC,EAAe,SAACZ,GACpBrB,EAAYqB,GACZ1B,GAAY0B,GAAY1B,EAAS0B,EAASxB,QAS5C,OAPAO,qBAAU,WACJK,EAAQlI,SAAWwH,GACrBC,EAAYS,EAAQ,IAEtBwB,EAAaxB,EAAQ,MACpB,CAACsB,IAGF,cAAC,IAAD,CACEzC,UAAW,cACX0B,gBAAiB,cACjBP,QAASA,EACTZ,MAAOE,EACPJ,SAAUsC,KCODC,EA/BiC,SAAC,GAI1C,IAHLC,EAGI,EAHJA,aACApC,EAEI,EAFJA,SACAJ,EACI,EADJA,SASMyC,EAAUD,EAAaxE,KAAI,SAACmC,EAAO5G,GACvC,IAAMmJ,EAAYvC,IAAUC,EAC5B,OACE,wBAEE9G,KAAM6G,EACNR,UAAS,8BACP+C,EAAY,kCAAoC,IAElDC,QAAS,SAAC5D,GAAD,OAhBK,SAClB6D,EACAzC,GAEAH,GAAYA,EAASG,GAYD0C,CAAY9D,EAAGoB,IANjC,SAQGA,GAPI5G,MAYX,OAAO,qBAAKoG,UAAW,eAAhB,SAAiC8C,K,iBClC1C,SAASK,EACPC,EACAC,EACAC,GACC,IACOC,EAAwCD,EAAxCC,WAAYC,EAA4BF,EAA5BE,SACpB,OADgDF,EAAlBG,cAE1BD,EAAWJ,EAAQC,EACnBE,EAAaH,EAAQC,ECQ3B,SAASK,EAAY5H,EAAoBC,GACvC,OAASA,EAAOD,EAAc,KAAK6H,QAAQ,GAG7C,IAqJeC,EArJ2B,SAAC,GAAiB,IAQtDC,EACAC,EATuCjJ,EAAc,EAAdA,QAMvCkJ,EAAmB,EACnBC,EAAY,EAGVC,EAAkC,GAClCC,EAAoB,GACpBC,EAAoB,GACpBC,EAA4B,GAC5BC,EAA8C,GAChDC,EAAuB,GAErBC,EAAY,CAChBC,MAAO,UACPC,KAAM,CAAEC,KAAM,GAAIC,OAAQ,wBAC1BC,SAAU,EACVC,aAAa,GAET1D,EAAe,CACnB2D,qBAAqB,EACrBC,UAAW,IACXC,YAAY,EACZC,OAAQ,CACNC,EAAG,CACDC,MAAOZ,GAETa,EAAG,CACDD,MAAOZ,IAGXc,QAAS,CACPC,QAAS,CACPC,UAAW,CACTC,WAAY,SAACF,GACX,IAAMlC,EAAQkC,EAAQG,UAChB1J,EAAOuJ,EAAQzK,QAAQkB,KAAKqH,GAC5BtH,EAAawJ,EAAQzK,QAAQlE,KAAKyM,GAClCpH,EAAYsJ,EAAQzK,QAAQmB,UAAUoH,GACtCjH,EAAmBmJ,EAAQzK,QAAQsB,iBAAiBiH,GACpDsC,EAAkBhC,EAAY5H,EAAYC,GAE1C4J,EAA+B,GACrC9M,OAAOC,KAAKkD,GAAWzE,SAAQ,SAACb,GAC9BiP,EAAmBpM,KAAnB,UACKrC,EAAmBgF,OAAOxF,IAD/B,aACyCgN,EACrC1H,EAAUtF,GAAKuF,QACfD,EAAUtF,GAAKqF,MAHnB,SAQF,IAAM6J,EAAsC,GAa5C,OAZA/M,OAAOC,KAAKqD,GAAkB5E,SAAQ,SAACb,GACrC,IAAMmP,IACJ1J,EAAiBzF,GAAKgF,OAASI,GAC/B6H,QAAQ,GACJmC,IAAe3J,EAAiBzF,GAAK+E,QAAUK,GAClD6H,QAAQ,GACRoC,iBACHH,EAA0BrM,KAA1B,UACK7C,EADL,qBACqBmP,EAAUE,iBAD/B,uBAC8DD,EAAWC,sBAIrE,CAAN,gBACWhK,EADX,qBAC4BD,EAAaC,GADzC,cAES2J,EAFT,KAGE,IACA,mBAJF,OAKKC,EALL,CAME,IACA,8BACGC,MAKXI,OAAQ,CACNC,SAAS,KAITtP,EAAqB,CACzBuP,OAAQjC,EACRkC,SAAU,CACR,CACE3F,MAAO,GACP7J,KAAMuN,EACNnI,KAAMoI,EACNnI,UAAWoI,EACXjI,iBAAkBkI,EAClB+B,gBAAiB9B,EACjB+B,YAAa,GACbC,YAAa,EACbC,YAAa,KAKbC,EAAyC,GAC3B3N,OAAOC,KAAK+B,GACpBtD,SAAQ,SAACb,GAAS,IAAD,EAC+BmE,EAAQnE,GAA1DoF,EADmB,EACnBA,WAAYC,EADO,EACPA,KAAMC,EADC,EACDA,UAAWG,EADV,EACUA,iBACrCqK,EAAgBjN,KAAK,CACnBkN,SAAU/P,EACVoF,aACAC,OACAC,YACAG,wBAGJqK,EAAgB1M,MAAK,SAACuC,EAAGC,GAAJ,OAAUA,EAAER,WAAaO,EAAEP,cAChD0K,EAAgBjP,SAAQ,SAACsE,GAAW,IAC1BC,EAA4DD,EAA5DC,WAAYC,EAAgDF,EAAhDE,KAAMC,EAA0CH,EAA1CG,UAAWG,EAA+BN,EAA/BM,iBAAkBsK,EAAa5K,EAAb4K,SACvD1C,GAAoBjI,EACpBkI,GAAajI,EACbkI,EAAS1K,KAAK,CAACkN,IACfvC,EAAQ3K,KAAKuC,GACbqI,EAAQ5K,KAAKwC,GACbqI,EAAa7K,KAAKyC,GAClBqI,EAAoB9K,KAAK4C,MDtId,SACbuK,EACAC,EACArD,EACAsD,GACC,IAIGtN,EAAGuN,EAHCtD,EAAyBD,EAAzBC,WAEFF,GAF2BC,EAAbE,SACUD,GACImD,EAGlC,IAAKpN,EAAI,EAAGA,EAAIoN,EAAYpN,IAC1BuN,EAAa1D,EAAe7J,EAAG+J,EAAcC,GAC7CsD,EAAYrN,KAAKoN,EAAWE,IC2H9BC,CACEN,EAAgBvN,OAChB8N,IAhIqC,CACrCxD,WAAY,GACZC,SAAU,IACVC,eAAe,GA+Hfa,GAEFT,EAAcE,EAAmBC,EACjCF,EAAeJ,EAAYK,EAAkBC,GAC7C,IAAMgD,EAAkB,0BAAsBjD,EAAtB,mBAAiDC,EAAjD,qBAAuEH,EAAvE,iBAA2FC,EAA3F,MAExB,OACE,qCACE,qBAAK9D,UAAU,SAAf,SACE,oBAAIA,UAAU,QAAd,SAAuBgH,MAEzB,qBAAKhH,UAAW,kBAAhB,SACE,cAAC,IAAD,CAAKrJ,KAAMA,EAAMwK,QAASA,UCxEnB8F,EArF6B,SAAC,GAAiB,IAAfpM,EAAc,EAAdA,QACvCqM,EAA0B,GAC1BC,EAAuB,GACvBC,EAA6B,GAC7BnD,EAAqB,GACrBoD,EAAsB,GAC5BxM,EAAQf,MAAK,SAACuC,EAAGC,GAAJ,OAAUD,EAAEtB,UAAYuB,EAAEvB,aACvCF,EAAQtD,SAAQ,SAACC,EAAO4L,GAAW,IAAD,EACxBtL,EAAsCN,EAAtCM,cAAekD,EAAuBxD,EAAvBwD,cAAe5C,EAAQZ,EAARY,IACtC8O,EAAc3N,KAAKyB,GACnBoM,EAAiB7N,KAAKzB,GACtBmM,EAAS1K,KAAKoG,OAAOyD,EAAQ,IAC7BiE,EAAS9N,KAAKnB,GAEd,IAAM8B,EAAO,UAAGW,EAAQuI,EAAQ,UAAnB,aAAG,EAAoBlJ,QACpCA,GAAWiN,EAAW5N,KAAKW,MAG7B,IAAMqK,EAAY,CAChBC,MAAO,UACPC,KAAM,CAAEC,KAAM,GAAIC,OAAQ,wBAC1BC,SAAU,EACVC,aAAa,GAET1D,EAAU,CACd2D,qBAAqB,EACrBG,OAAQ,CACN,WAAY,CACVE,MAAOZ,GAETa,EAAG,CACDD,MAAOZ,IAGXc,QAAS,CACPC,QAAS,CACPC,UAAW,CACTC,WAAY,SAACF,GACX,IAAMlC,EAAQkC,EAAQG,UAChB6B,EAAYhC,EAAQzK,QAAQyM,UAAUlE,GACtChL,EAAMkN,EAAQzK,QAAQzC,IAAIgL,GAChC,MAAO,CAACkE,EAAD,UAAelP,EAAM,MAAQ,cAMxCzB,EAAO,CACXuP,OAAQjC,EACRkC,SAAU,CACR,CACE3F,MAAO,kBACP7J,KAAMuQ,EACNI,UAAWF,EACXhP,IAAKiP,EACLE,MAAM,EACNnB,gBAAiB,gBACjBC,YAAa,iBACbmB,QAAS,YAEX,CACEhH,MAAO,MACP7J,KAAMwQ,EACNG,UAAWF,EACXhP,IAAKiP,EACLE,MAAM,EACNnB,gBAAiB,iBACjBC,YAAa,iBACbmB,QAAS,cAKf,OACE,qCACE,qBAAKxH,UAAU,SAAf,SACE,oBAAIA,UAAU,QAAd,kCAEF,qBAAKA,UAAW,kBAAhB,SACE,cAAC,IAAD,CAAMrJ,KAAMA,EAAMwK,QAASA,UCXpBsG,EAtDqC,SAAC,GAI9C,IAHLrN,EAGI,EAHJA,YACAsN,EAEI,EAFJA,iBACAC,EACI,EADJA,UACI,EACoChL,mBAEtC,IAHE,mBACGiL,EADH,KACiBC,EADjB,OAIwClL,mBAAiB,IAJzD,mBAIGmL,EAJH,KAImBC,EAJnB,KAsCJ,OAhCAjH,qBAAU,WACR,IAAMkH,EAA0C,GAChD,UAAI5N,QAAJ,IAAIA,OAAJ,EAAIA,EAAasK,KACf,GAAIgD,EAAiBhI,SAAS,GAC5BsI,EAAoBzO,KAApB,MAAAyO,EAAmB,YACd7N,EAA+BC,SAE/B,CACL,IAAM6N,EAAiC,IAAI7J,IAC3CsJ,EAAiBnQ,SAAQ,SAAC2Q,GACxB,IAAM5N,EAAUF,EAAY+N,IAAID,GAChC5N,GAAW2N,EAAgBG,IAAIF,EAAY5N,MAE7C0N,EAAoBzO,KAApB,MAAAyO,EAAmB,YACd7N,EAA+B8N,KAKxC,OAAQN,GACN,KAAKvQ,EAAY,GACfyQ,EX6HD,SACLlR,GAEA,IAAMkE,EAA2B,GAajC,OAZAlE,EAAKY,SAAQ,SAACC,GAIZ,GAFEA,EAAMM,cAAc4H,SAAS1I,IAC7BQ,EAAMO,WAAW2H,SAAS1I,GAE1BqE,EAAmBR,EAAS,KAAMrD,OAC7B,CACL,IAAM6Q,EAAsBlN,EAAoB3D,EAAMM,eACtDuD,EAAmBR,EAASwN,EAAqB7Q,OAI9CqD,EW7IeyN,CAAsBN,IACtC,MACF,KAAK5Q,EAAY,GACfyQ,EAAgBjN,EAA0BoN,IAK9CD,EAAkBJ,KACjB,CAACA,EAAWvN,EAAasN,IAG1B,sBAAK1H,UAAW,gBAAhB,UACsB,eAAnB8H,GACC,cAAC,EAAD,CAAUjN,QAAS+M,IAED,kBAAnBE,GACC,cAAC,EAAD,CAAWjN,QAAS+M,QCebW,EAjE6B,WAAO,IAAD,EACF5L,mBAC5C,IAF8C,mBACzCtE,EADyC,KACxBmQ,EADwB,OAIlB7L,mBAAmB,CAAC,KAJF,mBAIzC8L,EAJyC,KAIhCC,EAJgC,OAKF/L,mBAAiB,IALf,mBAKzCgM,EALyC,KAKxBC,EALwB,OAMVjM,mBAAwB,IAAIyB,KANlB,mBAMzChE,EANyC,KAM5ByO,EAN4B,OAOAlM,mBAAmB,CAAC,IAPpB,mBAOzC+K,EAPyC,KAOvBoB,EAPuB,OAQdnM,mBAAiB,cARH,mBAQzCgL,EARyC,KAQ9BoB,EAR8B,OAU9CpM,oBAAkB,GAV4B,mBASzCqM,EATyC,KASpBC,EAToB,KA8BhD,OAlBAnI,qBAAU,WAER,IChC6B7E,EDgCvBiN,EAAyBpL,OAAOlH,aAAamH,QAAQvH,GAC3D,GAAI0S,EAAwB,CAC1B,IACM7Q,EAAkBhB,EADAP,KAAKmH,MAAMiL,IAEnCV,EAAmBnQ,GACnBqQ,GCrC2BzM,EDqCP5D,ECpCjB,YAAI,IAAI8Q,IAAIlN,EAAQoC,KAAI,SAAC7G,GAAD,OAAWA,EAAMQ,qBDsC7C,CAACgR,IAEJlI,qBAAU,WAER,IZ6BFsI,EY7BQC,GZ6BRD,EY7B6DT,EAAjBtQ,EZ+BfoH,QAC3B,SAACjI,GAAD,OAAWA,EAAMQ,aAAeoR,MY/BhCP,ERzCG,SAAqB5M,GAC1B,IAAMqN,EAA+B,IAAIlL,IACzCnC,EAAQnC,MAAK,SAACuC,EAAGC,GAAJ,OAAUD,EAAE3E,YAAc4E,EAAE5E,eAEzC,IACI6R,EADArB,EAA4B,KAyBhC,OAvBAjM,EAAQuN,OAAM,SAAChS,GACb,GAAI0Q,EAAY,CAEd,IAM6B,EANvBuB,EAAqBxJ,IAAMoB,KAAKkI,EAAU7R,aAMhD,GALgCuI,IAC7BoB,KAAK7J,EAAME,aACXyI,UAAUsJ,EAAoBA,EAAmBC,IAAI,EAAG,SAMzD,OAFA,UAAAJ,EAAcnB,IAAID,UAAlB,SAA+B3O,KAAK/B,GACpC+R,EAAY/R,GACL,EAQX,OAHA0Q,EAAa1Q,EAAME,YACnB6R,EAAY/R,EACZ8R,EAAclB,IAAIF,EAAY,CAAC1Q,KACxB,KAGF8R,EQYUK,CAAYN,IAC3BP,EAAoB,CAAC,MACpB,CAACzQ,EAAiBsQ,IAGnB,sBAAK3I,UAAU,YAAf,UACE,sBAAKA,UAAU,qBAAf,UACE,cAAC,EAAD,CACEvD,wBAAyBwM,EACzBvM,wBAAyBsM,IAE3B,sBAAKhJ,UAAU,qBAAf,UACE,cAAC,EAAD,CACEK,SAAU0I,EACVlG,aAAczL,EACdqJ,SAAUkH,IAEXc,GACC,cAAC,EAAD,CAAYpI,SAAUuI,EAAoBnG,MAAOgG,IAElDrO,GACC,cAAC,EAAD,CACEiG,SAAUyI,EACV1O,YAAaA,UAKpB/B,GACC,cAAC,EAAD,CACE+B,YAAaA,EACbsN,iBAAkBA,EAClBC,UAAWA,QElENiC,MARf,WACE,OACE,qBAAK5J,UAAU,YAAf,SACE,cAAC,EAAD,OCOS6J,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.f4a06360.chunk.js","sourcesContent":["import React from \"react\";\nimport { ArenaMatch } from \"../Types/ArenaTypes\";\n\nexport const INSTANCE_DATA = \"instanceData\";\nexport const MY_CHAR_NAME = \"myCharName\";\n\nexport function mergeState(filteredData: ArenaMatch[]): void {\n  const filterKey = \"enteredTime\";\n  const state = window.localStorage.getItem(INSTANCE_DATA);\n\n  if (!state) {\n    setLocalStorageField(INSTANCE_DATA, filteredData);\n    return;\n  }\n  const parsedState = JSON.parse(state);\n  const mergedState = [...parsedState, ...filteredData];\n\n  const filteredState = [\n    ...new Map(mergedState.map((item) => [item[filterKey], item])).values(),\n  ];\n\n  setLocalStorageField(INSTANCE_DATA, filteredState);\n}\n\nexport function localStorageToState(\n  key: string,\n  setReactState: React.Dispatch<React.SetStateAction<any>>\n): void {\n  const currentState = window.localStorage.getItem(key);\n  currentState && setReactState(JSON.parse(currentState));\n}\n\nexport function setLocalStorageField(key: string, data: any): void {\n  localStorage.setItem(key, JSON.stringify(data));\n}\n","import {\n  ArenaMatch,\n  arenaPlayerKeys,\n  ArenaTeam,\n  MatchSessions,\n  ModdedArenaMatch,\n  ModdedArenaTeam,\n  RatingChangeDataset,\n  RatingChangeObj,\n  TeamCompDataset,\n  TeamPerformanceStats,\n} from \"../Types/ArenaTypes\";\n\nconst DISCONNECTED = \"!disconnected\";\nconst DC_TEAM_NAME = \"~DC~\";\nexport const ARENA_INSTANCE_KEYS = [\"572\", \"562\", \"559\"];\nexport const ARENA_INSTANCE_IDS = {\n  [572 as number]: \"Ruins of Lordaeron\",\n  [562 as number]: \"Blade's Edge Arena\",\n  [559 as number]: \"Nagrand Arena\",\n};\nconst PLAYER_KEYS: arenaPlayerKeys[] = [\n  \"player1\",\n  \"player2\",\n  \"player3\",\n  \"player4\",\n  \"player5\",\n];\nexport const CHART_TYPES = [\"Team comps\", \"Rating change\"];\n\nexport function filterJunkData(data: ArenaMatch[]): ArenaMatch[] {\n  return data.filter(\n    (match) =>\n      Object.keys(ARENA_INSTANCE_IDS).includes(String(match.instanceID)) &&\n      match.hasOwnProperty(\"purpleTeam\") &&\n      match.hasOwnProperty(\"goldTeam\")\n  );\n}\n\nexport function getModdedArenaMatches(data: ArenaMatch[]): ModdedArenaMatch[] {\n  const modifiedData: ModdedArenaMatch[] = [];\n  data.forEach((match) => {\n    const moddedMatch: ModdedArenaMatch = {\n      enteredTime: match.enteredTime,\n      instanceID: match.instanceID,\n      instanceName: match.instanceName,\n      playerName: match.playerName,\n      enemyTeamComp: [],\n      myTeamComp: [],\n      myTeamName: \"\",\n      bracket: 0,\n      myTeam: {},\n      enemyTeam: {},\n      win: false,\n    };\n\n    const moddedMatchData = getModdedArenaData(match);\n    Object.assign(moddedMatch, moddedMatchData);\n\n    // Filter out skirmish matches\n    if (\n      !(\n        moddedMatch.myTeam.player1?.teamMMR === 0 &&\n        moddedMatch.enemyTeam.player1?.teamMMR === 0\n      )\n    ) {\n      modifiedData.push(moddedMatch);\n    }\n  });\n  return modifiedData;\n}\n\nexport function filterMatchData(\n  data: ModdedArenaMatch[],\n  selectedTeam: string\n): ModdedArenaMatch[] {\n  let filteredMatchData = data.filter(\n    (match) => match.myTeamName === selectedTeam\n  );\n  return filteredMatchData;\n}\n\nexport function matchArrayFromSelectedSessions(\n  sessionData: MatchSessions\n): ModdedArenaMatch[] {\n  const filteredMatches: ModdedArenaMatch[] = [];\n\n  sessionData.forEach((session) => {\n    filteredMatches.push(...session);\n  });\n\n  return filteredMatches;\n}\n\nfunction getModdedArenaData(match: ArenaMatch): any {\n  let myTeam: ArenaTeam, enemyTeam: ArenaTeam, win: boolean, myTeamName: string;\n  const myCharName = match.playerName;\n  if (match.goldTeam.hasOwnProperty(myCharName)) {\n    myTeam = match.goldTeam;\n    myTeamName = match.goldTeam[myCharName].teamName;\n    enemyTeam = match.purpleTeam;\n    win = !!match.winningFaction;\n  } else {\n    myTeam = match.purpleTeam;\n    myTeamName = match.purpleTeam[myCharName].teamName;\n    enemyTeam = match.goldTeam;\n    win = !match.winningFaction;\n  }\n\n  const myTeamNames: string[] = Object.keys(myTeam);\n  const enemyTeamNames: string[] = Object.keys(enemyTeam);\n  const myTeamPlayerCount = myTeamNames.length;\n  const enemyTeamPlayerCount = enemyTeamNames.length;\n  const bracket = Math.max(myTeamPlayerCount, enemyTeamPlayerCount);\n  fillNameArraysWithBlanks(myTeamNames, enemyTeamNames, bracket);\n\n  // modded arena team\n  let myModdedTeam: ModdedArenaTeam = {};\n  let myTeamComp: string[] = [];\n  let enemyModdedTeam: ModdedArenaTeam = {};\n  let enemyTeamComp: string[] = [];\n  myTeamNames.forEach((name, idx) =>\n    getModdedTeamsAndTeamComps(name, idx, myTeam, myModdedTeam, myTeamComp)\n  );\n  enemyTeamNames.forEach((name, idx) =>\n    getModdedTeamsAndTeamComps(\n      name,\n      idx,\n      enemyTeam,\n      enemyModdedTeam,\n      enemyTeamComp\n    )\n  );\n  return {\n    bracket,\n    win,\n    myTeamName,\n    myTeam: myModdedTeam,\n    myTeamComp: myTeamComp.sort(),\n    enemyTeam: enemyModdedTeam,\n    enemyTeamComp: enemyTeamComp.sort(),\n  };\n}\n\nfunction getModdedTeamsAndTeamComps(\n  name: string,\n  idx: number,\n  teamObj: ArenaTeam,\n  moddedTeamObj: ModdedArenaTeam,\n  compArr: string[]\n) {\n  const playerDCed = name === DC_TEAM_NAME;\n  moddedTeamObj[PLAYER_KEYS[idx]] = playerDCed\n    ? null\n    : {\n        name: name,\n        ...teamObj[name],\n      };\n  compArr.push(playerDCed ? DISCONNECTED : teamObj[name].class);\n}\n\nfunction fillNameArraysWithBlanks(\n  myTeamNames: string[],\n  enemyTeamNames: string[],\n  arenaBracket: number\n): void {\n  if (myTeamNames.length < arenaBracket) {\n    for (let i = 0; i < arenaBracket - myTeamNames.length; i++) {\n      myTeamNames.push(DC_TEAM_NAME);\n    }\n  }\n  if (enemyTeamNames.length < arenaBracket) {\n    for (let i = 0; i < arenaBracket - enemyTeamNames.length; i++) {\n      enemyTeamNames.push(DC_TEAM_NAME);\n    }\n  }\n}\n\nexport function createTeamCompDataSet(\n  data: ModdedArenaMatch[]\n): TeamCompDataset {\n  const dataset: TeamCompDataset = {};\n  data.forEach((match) => {\n    const hasDCedPlayers =\n      match.enemyTeamComp.includes(DISCONNECTED) ||\n      match.myTeamComp.includes(DISCONNECTED);\n    if (hasDCedPlayers) {\n      fillTeamCompObject(dataset, \"DC\", match);\n    } else {\n      const enemyTeamCompString = teamcompArrToString(match.enemyTeamComp);\n      fillTeamCompObject(dataset, enemyTeamCompString, match);\n    }\n  });\n\n  return dataset;\n}\n\nexport function createRatingChangeDataSet(\n  data: ModdedArenaMatch[]\n): RatingChangeDataset {\n  const dataset: RatingChangeDataset = [];\n  data.forEach((match) => {\n    fillRatingChangeArray(dataset, match);\n  });\n\n  return dataset;\n}\n\nfunction fillTeamCompObject(\n  obj: TeamCompDataset,\n  key: string,\n  match: ModdedArenaMatch\n): void {\n  const DC_MATCH = key === \"DC\";\n  const { instanceID, myTeam, win, bracket } = match;\n  // get performance stats for match\n  const TeamPerformanceStats: TeamPerformanceStats = {};\n  if (!DC_MATCH) {\n    for (let i = 0; i < bracket; i++) {\n      const player = myTeam[PLAYER_KEYS[i]];\n      if (player) {\n        TeamPerformanceStats[player.name] = {\n          healing: player.healing,\n          damage: player.damage,\n        };\n      } else {\n        TeamPerformanceStats[\"DC\"] = { healing: 0, damage: 0 };\n      }\n    }\n  }\n\n  const entry = obj[key];\n\n  if (entry) {\n    // overall stats\n    entry.matchCount += 1;\n    if (win) {\n      entry.wins++;\n    }\n\n    // zone stats\n    if (entry.zoneStats[instanceID]) {\n      entry.zoneStats[instanceID].matches++;\n      if (win) {\n        entry.zoneStats[instanceID].wins++;\n      }\n    } else {\n      entry.zoneStats[instanceID] = { matches: 1, wins: Number(win) };\n    }\n\n    // team performance stats\n    !DC_MATCH &&\n      mergePlayerPerformanceStats(entry.performanceStats, TeamPerformanceStats);\n  } else {\n    obj[key] = {\n      matchCount: 1,\n      wins: Number(win),\n      performanceStats: TeamPerformanceStats,\n      zoneStats: { [instanceID]: { matches: 1, wins: Number(win) } },\n    };\n  }\n}\n\nfunction fillRatingChangeArray(\n  arr: RatingChangeDataset,\n  match: ModdedArenaMatch\n): void {\n  const { enteredTime: timestamp, enemyTeamComp, myTeam, bracket, win } = match;\n  let newTeamRating = -1;\n  let teamMMR = -1;\n  for (let i = 0; i < bracket; i++) {\n    const player = myTeam[PLAYER_KEYS[i]];\n    if (player) {\n      newTeamRating = player.newTeamRating;\n      teamMMR = player.teamMMR;\n    }\n  }\n  const RatingChangeObject: RatingChangeObj = {\n    timestamp,\n    newTeamRating,\n    teamMMR,\n    win,\n    enemyTeamComp: teamcompArrToString(enemyTeamComp),\n  };\n  arr.push(RatingChangeObject);\n}\n\nfunction teamcompArrToString(arr: string[]): string {\n  return arr.reduce((a, b) => a.concat(\" \\\\ \", b));\n}\n\nfunction mergePlayerPerformanceStats(\n  currentStats: TeamPerformanceStats,\n  currentMatchStats: TeamPerformanceStats\n): void {\n  Object.keys(currentStats).forEach((player) => {\n    currentStats[player].healing += currentMatchStats[player].healing;\n    currentStats[player].damage += currentMatchStats[player].damage;\n  });\n}\n","import React, { useCallback, useState } from \"react\";\nimport { parseData } from \"../utils/parseData\";\nimport { arrayBufferToString } from \"../utils/ArrayBuffer-StringHelper\";\nimport { useDropzone } from \"react-dropzone\";\nimport { mergeState } from \"../utils/stateManagement\";\nimport { filterJunkData } from \"../utils/dataSetHelpers\";\n\nexport type landingProps = {\n  localStoreChangeHandler: React.Dispatch<React.SetStateAction<boolean>>;\n  localStorageChangeValue: boolean;\n};\n\nconst UploadArea: React.FC<landingProps> = ({\n  localStoreChangeHandler,\n  localStorageChangeValue,\n}) => {\n  const [text, setText] = useState(\"Upload file here\");\n\n  const onDrop = useCallback(\n    (acceptedFiles) => {\n      acceptedFiles.forEach((file: any) => {\n        console.dir(acceptedFiles);\n        //TBD\n        const reader = new FileReader();\n\n        reader.onabort = () => setText(\"File reading was aborted\");\n        reader.onerror = () => setText(\"File reading failed\");\n        reader.onload = () => {\n          const binaryStr = reader.result;\n          mergeState(filterJunkData(parseData(arrayBufferToString(binaryStr))));\n          localStoreChangeHandler(!localStorageChangeValue);\n          setText(\"File successfully parsed\");\n        };\n        reader.readAsArrayBuffer(file);\n      });\n    },\n    [localStoreChangeHandler, localStorageChangeValue]\n  );\n  const { getRootProps, getInputProps } = useDropzone({ onDrop });\n  return (\n    <div {...getRootProps()} className=\"upload-area\">\n      <input {...getInputProps()} />\n      <p>{text}</p>\n    </div>\n  );\n};\n\nexport default UploadArea;\n","export function arrayBufferToString(buf: string | ArrayBuffer | null): string {\n  if (buf === null || typeof buf === \"string\") {\n    return '{\"error\":true}';\n  }\n  let jsonKey: string = \"\";\n  // ** works, but fails with unicode chars **\n  // new Uint8Array(buf).forEach(\n  //   (byte: number) => (jsonKey += String.fromCharCode(byte))\n  // );\n  jsonKey = new TextDecoder().decode(new Uint8Array(buf));\n  return jsonKey;\n}\n\nexport function stringToArrayBuffer(str: string) {\n  var buf = new ArrayBuffer(str.length * 2); // 2 bytes for each char\n  var bufView = new Uint16Array(buf);\n  for (var i = 0, strLen = str.length; i < strLen; i++) {\n    bufView[i] = str.charCodeAt(i);\n  }\n  return buf;\n}\n","import { ArenaMatch } from \"../Types/ArenaTypes\";\n\nexport const parseData = (data: string): ArenaMatch[] => {\n  // Get part of the string with actual instance data\n  const start = data.lastIndexOf('[\"instances\"] = ') + 17; // Only works if actual instance object is last in data set\n  const newStr = data.slice(start);\n\n  // Clean up the string and split it in separate objects\n  const enumRegexp = new RegExp(/, -- \\[\\d+\\]/, \"g\");\n  const instanceDataArray = newStr\n    .replaceAll(\"\\n\", \"\")\n    .replaceAll(\"\\r\", \"\")\n    .replaceAll(\"\\t\", \"\")\n    .replaceAll('[\"', '\"')\n    .replaceAll('\"]', '\"')\n    .replaceAll(\" = \", \":\")\n    .replaceAll(\",}\", \"}\")\n    .split(enumRegexp);\n\n  // Parse all valid objects\n  let parsedData: ArenaMatch[] = [];\n  instanceDataArray.forEach((el, idx) => {\n    try {\n      parsedData.push(JSON.parse(el));\n    } catch (e) {\n      // Ignore failed parses (random strings and AB instances)\n      // console.log(e);\n    }\n  });\n  return parsedData;\n};\n","import { MatchSessions, ModdedArenaMatch } from \"../Types/ArenaTypes\";\nimport dayjs from \"dayjs\";\nimport isBetween from \"dayjs/plugin/isBetween\";\ndayjs.extend(isBetween);\n\nexport function getSessions(matches: ModdedArenaMatch[]): MatchSessions {\n  const matchSessions: MatchSessions = new Map();\n  matches.sort((a, b) => a.enteredTime - b.enteredTime);\n\n  let sessionKey: number | null = null;\n  let prevMatch: ModdedArenaMatch;\n  matches.every((match) => {\n    if (sessionKey) {\n      // If session object is present, find if new match fits that session time frame\n      const prevMatchEnterTime = dayjs.unix(prevMatch.enteredTime);\n      const matchIsWithinOldSession = dayjs\n        .unix(match.enteredTime)\n        .isBetween(prevMatchEnterTime, prevMatchEnterTime.add(1, \"hour\"));\n\n      // If match fits, add it to old session\n      if (matchIsWithinOldSession) {\n        matchSessions.get(sessionKey)?.push(match);\n        prevMatch = match;\n        return true;\n      }\n    }\n\n    // If match doesn't fit or session key is null, create new session\n    sessionKey = match.enteredTime;\n    prevMatch = match;\n    matchSessions.set(sessionKey, [match]);\n    return true;\n  });\n\n  return matchSessions;\n}\n","import React, { useEffect, useRef, useState } from \"react\";\nimport { MatchSessions, SessionSelectOption } from \"../Types/ArenaTypes\";\nimport Select, { ActionMeta, MultiValue } from \"react-select\";\nimport dayjs from \"dayjs\";\n\nexport type sessionSelectProps = {\n  sessionData: MatchSessions;\n  onChange: (value: number[]) => void;\n};\n\nconst SessionSelect: React.FC<sessionSelectProps> = ({\n  sessionData,\n  onChange,\n}) => {\n  const selectAllOption: SessionSelectOption = {\n    value: 0,\n    label: \"All Data\",\n  };\n  const [selected, setSelected] = useState<MultiValue<SessionSelectOption>>([]);\n  const valueRef = useRef(selected);\n  valueRef.current = selected;\n\n  useEffect(() => {\n    if (selected.length) {\n      let overlap = true;\n      const sessionDataKeys = [...sessionData.keys()];\n      const selectedValues = selected.map((el) => el.value);\n      selectedValues.forEach((val) => {\n        if (!sessionDataKeys.includes(val)) {\n          overlap = false;\n        }\n      });\n      if (!overlap) {\n        setSelected([]);\n      }\n    }\n  }, [selected, sessionData]);\n\n  const sessionKeys: number[] = [...sessionData.keys()];\n\n  const options: SessionSelectOption[] = [];\n  sessionKeys.forEach((key, idx) => {\n    const formattedData: string = dayjs.unix(key).format(\"HH:mm - DD/MM/YY\");\n    const sessionOption = {\n      value: key,\n      label: `Session ${idx + 1}, @ ${formattedData}`,\n    };\n    options.push(sessionOption);\n  });\n  options.reverse();\n\n  const isSelectAllSelected = () => {\n    return valueRef?.current?.length === options.length;\n  };\n\n  const getOptions = () => [selectAllOption, ...options];\n\n  const isOptionSelected = (option: SessionSelectOption): boolean =>\n    valueRef?.current?.some(({ value }) => value === option.value) ||\n    isSelectAllSelected();\n\n  const getValue = () => (isSelectAllSelected() ? [selectAllOption] : selected);\n\n  const handleChange = (\n    newValue: MultiValue<SessionSelectOption>,\n    actionMeta: ActionMeta<SessionSelectOption>\n  ) => {\n    const selectedTimestampArray: number[] = [];\n    const { action, option, removedValue } = actionMeta;\n    if (action === \"select-option\" && option?.value === selectAllOption.value) {\n      setSelected(options);\n      selectedTimestampArray.push(...options.map((option) => option.value));\n    } else if (\n      (action === \"deselect-option\" &&\n        option?.value === selectAllOption.value) ||\n      (action === \"remove-value\" &&\n        removedValue?.value === selectAllOption.value)\n    ) {\n      setSelected([]);\n    } else if (\n      actionMeta.action === \"deselect-option\" &&\n      isSelectAllSelected()\n    ) {\n      const filteredOptions = options.filter(\n        ({ value }) => value !== option?.value\n      );\n      setSelected(filteredOptions);\n      selectedTimestampArray.push(\n        ...filteredOptions.map((option) => option.value)\n      );\n    } else {\n      setSelected(newValue || []);\n      selectedTimestampArray.push(...newValue.map((option) => option.value));\n    }\n    onChange && onChange(selectedTimestampArray);\n  };\n\n  return (\n    <Select\n      className={\"session-select\"}\n      classNamePrefix={\"session-select\"}\n      defaultValue={selectAllOption}\n      isOptionSelected={isOptionSelected}\n      options={getOptions()}\n      value={getValue()}\n      onChange={handleChange}\n      hideSelectedOptions={false}\n      closeMenuOnSelect={false}\n      isMulti\n    />\n  );\n};\n\nexport default SessionSelect;\n","import React, { useEffect, useState } from \"react\";\nimport Select, { SingleValue } from \"react-select\";\nimport { TeamSelectOption } from \"../Types/ArenaTypes\";\n\ntype teamSelectProps = {\n  onChange: (value: string) => void;\n  teams: string[];\n};\n\nconst TeamSelect: React.FC<teamSelectProps> = ({ teams, onChange }) => {\n  const [selected, setSelected] = useState<SingleValue<TeamSelectOption>>();\n  const options: TeamSelectOption[] = teams.map((team) => ({\n    value: team,\n    label: team,\n  }));\n  const handleChange = (newValue: SingleValue<TeamSelectOption>) => {\n    setSelected(newValue);\n    onChange && newValue && onChange(newValue.value);\n  };\n  useEffect(() => {\n    if (options.length && !selected) {\n      setSelected(options[0]);\n    }\n    handleChange(options[0]);\n  }, [teams]);\n\n  return (\n    <Select\n      className={\"team-select\"}\n      classNamePrefix={\"team-select\"}\n      options={options}\n      value={selected}\n      onChange={handleChange}\n    />\n  );\n};\n\nexport default TeamSelect;\n","import React, { Dispatch, SetStateAction } from \"react\";\n\nexport type buttonGroupProps = {\n  buttonLabels: string[];\n  selected: string;\n  onChange: Dispatch<SetStateAction<string>>;\n};\n\nconst ButtonGroup: React.FC<buttonGroupProps> = ({\n  buttonLabels,\n  selected,\n  onChange,\n}) => {\n  const handleClick = (\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n    label: string\n  ) => {\n    onChange && onChange(label);\n  };\n\n  const buttons = buttonLabels.map((label, idx) => {\n    const isClicked = label === selected;\n    return (\n      <button\n        key={idx}\n        name={label}\n        className={`button-group__button${\n          isClicked ? \" button-group__button--selected\" : \"\"\n        }`}\n        onClick={(e) => handleClick(e, label)}\n      >\n        {label}\n      </button>\n    );\n  });\n\n  return <div className={\"button-group\"}>{buttons}</div>;\n};\n\nexport default ButtonGroup;\n","import { ColorRangeInfo } from \"../Types/ArenaTypes\";\n\nfunction calculatePoint(\n  index: number,\n  intervalSize: number,\n  colorRangeInfo: ColorRangeInfo\n) {\n  const { colorStart, colorEnd, useEndAsStart } = colorRangeInfo;\n  return useEndAsStart\n    ? colorEnd - index * intervalSize\n    : colorStart + index * intervalSize;\n}\n\nexport default function generateChartColors(\n  dataLength: number,\n  colorScale: (i: number) => string,\n  colorRangeInfo: ColorRangeInfo,\n  targetArray: string[]\n) {\n  const { colorStart, colorEnd } = colorRangeInfo;\n  const colorRange = colorEnd - colorStart;\n  const intervalSize = colorRange / dataLength;\n  let i, colorPoint;\n\n  for (i = 0; i < dataLength; i++) {\n    colorPoint = calculatePoint(i, intervalSize, colorRangeInfo);\n    targetArray.push(colorScale(colorPoint));\n  }\n}\n\nexport {};\n","import React from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport { interpolateTurbo } from \"d3-scale-chromatic\";\nimport {\n  ChartDataSet,\n  ColorRangeInfo,\n  SortableTeamCompObj,\n  TeamCompDataset,\n  TeamPerformanceStats,\n  ZoneStats,\n} from \"../Types/ArenaTypes\";\nimport generateChartColors from \"../utils/colorGeneration\";\nimport { ARENA_INSTANCE_IDS } from \"../utils/dataSetHelpers\";\n\ntype BarChartProps = {\n  dataset: TeamCompDataset;\n};\n\nfunction calcWinrate(matchCount: number, wins: number): string {\n  return ((wins / matchCount) * 100).toFixed(1);\n}\n\nconst BarChart: React.FC<BarChartProps> = ({ dataset }) => {\n  const colorRangeInfo: ColorRangeInfo = {\n    colorStart: 0.1,\n    colorEnd: 0.85,\n    useEndAsStart: true,\n  };\n  let totalMatchNumber = 0;\n  let totalWins = 0;\n  let totalLosses: number;\n  let totalWinrate: string;\n  const labelArr: (string | string[])[] = [];\n  const dataArr: number[] = [];\n  const winsArr: number[] = [];\n  const zoneStatsArr: ZoneStats[] = [];\n  const performanceStatsArr: TeamPerformanceStats[] = [];\n  let colorArray: string[] = [];\n\n  const ticksConf = {\n    color: \"#292F36\",\n    font: { size: 15, family: \"'Roboto', sans-serif\" },\n    stepSize: 1,\n    beginAtZero: true,\n  };\n  const options: any = {\n    maintainAspectRatio: false,\n    indexAxis: \"y\",\n    responsive: true,\n    scales: {\n      y: {\n        ticks: ticksConf,\n      },\n      x: {\n        ticks: ticksConf,\n      },\n    },\n    plugins: {\n      tooltip: {\n        callbacks: {\n          afterLabel: (tooltip: any) => {\n            const index = tooltip.dataIndex;\n            const wins = tooltip.dataset.wins[index];\n            const matchCount = tooltip.dataset.data[index];\n            const zoneStats = tooltip.dataset.zoneStats[index];\n            const performanceStats = tooltip.dataset.performanceStats[index];\n            const winrate: string = calcWinrate(matchCount, wins);\n\n            const zoneStatsStringArr: string[] = [];\n            Object.keys(zoneStats).forEach((key) => {\n              zoneStatsStringArr.push(\n                `${ARENA_INSTANCE_IDS[Number(key)]}: ${calcWinrate(\n                  zoneStats[key].matches,\n                  zoneStats[key].wins\n                )}%`\n              );\n            });\n\n            const performanceStatsStringArr: string[] = [];\n            Object.keys(performanceStats).forEach((key) => {\n              const avgDamage = +(\n                performanceStats[key].damage / matchCount\n              ).toFixed(0);\n              const avgHealing = +(performanceStats[key].healing / matchCount)\n                .toFixed(0)\n                .toLocaleString();\n              performanceStatsStringArr.push(\n                `${key}: damage: ${avgDamage.toLocaleString()} | healing: ${avgHealing.toLocaleString()}`\n              );\n            });\n\n            return [\n              `Wins: ${wins}, Losses: ${matchCount - wins}`,\n              `WR: ${winrate}%`,\n              \" \",\n              \"Zone win rates:\",\n              ...zoneStatsStringArr,\n              \" \",\n              \"Average performance stats:\",\n              ...performanceStatsStringArr,\n            ];\n          },\n        },\n      },\n      legend: {\n        display: false,\n      },\n    },\n  };\n  const data: ChartDataSet = {\n    labels: labelArr,\n    datasets: [\n      {\n        label: \"\",\n        data: dataArr,\n        wins: winsArr,\n        zoneStats: zoneStatsArr,\n        performanceStats: performanceStatsArr,\n        backgroundColor: colorArray,\n        borderColor: [],\n        borderWidth: 1,\n        hoverOffset: 6,\n      },\n    ],\n  };\n\n  const sortableEntries: SortableTeamCompObj[] = [];\n  const datasetKeys = Object.keys(dataset);\n  datasetKeys.forEach((key) => {\n    const { matchCount, wins, zoneStats, performanceStats } = dataset[key];\n    sortableEntries.push({\n      teamComp: key,\n      matchCount,\n      wins,\n      zoneStats,\n      performanceStats,\n    });\n  });\n  sortableEntries.sort((a, b) => b.matchCount - a.matchCount);\n  sortableEntries.forEach((entry) => {\n    const { matchCount, wins, zoneStats, performanceStats, teamComp } = entry;\n    totalMatchNumber += matchCount;\n    totalWins += wins;\n    labelArr.push([teamComp]);\n    dataArr.push(matchCount);\n    winsArr.push(wins);\n    zoneStatsArr.push(zoneStats);\n    performanceStatsArr.push(performanceStats);\n  });\n  generateChartColors(\n    sortableEntries.length,\n    interpolateTurbo,\n    colorRangeInfo,\n    colorArray\n  );\n  totalLosses = totalMatchNumber - totalWins;\n  totalWinrate = calcWinrate(totalMatchNumber, totalWins);\n  const chartTitle: string = `Matches Played: ${totalMatchNumber}, Wins: ${totalWins}, Losses: ${totalLosses}, WR: ${totalWinrate}%,`;\n\n  return (\n    <>\n      <div className=\"header\">\n        <h1 className=\"title\">{chartTitle}</h1>\n      </div>\n      <div className={\"chart-container\"}>\n        <Bar data={data} options={options} />\n      </div>\n    </>\n  );\n};\n\nexport default BarChart;\n","import React from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { RatingChangeDataset } from \"../Types/ArenaTypes\";\n\ntype LineChartProps = {\n  dataset: RatingChangeDataset;\n};\n\nconst LineChart: React.FC<LineChartProps> = ({ dataset }) => {\n  const teamRatingArr: number[] = [];\n  const teamMMRArr: number[] = [];\n  const enemyTeamCompArr: string[] = [];\n  const labelArr: string[] = [];\n  const winArray: boolean[] = [];\n  dataset.sort((a, b) => a.timestamp - b.timestamp);\n  dataset.forEach((match, index) => {\n    const { enemyTeamComp, newTeamRating, win } = match;\n    teamRatingArr.push(newTeamRating);\n    enemyTeamCompArr.push(enemyTeamComp);\n    labelArr.push(String(index + 1));\n    winArray.push(win);\n\n    const teamMMR = dataset[index + 1]?.teamMMR;\n    teamMMR && teamMMRArr.push(teamMMR);\n  });\n\n  const ticksConf = {\n    color: \"#292F36\",\n    font: { size: 15, family: \"'Roboto', sans-serif\" },\n    stepSize: 1,\n    beginAtZero: true,\n  };\n  const options = {\n    maintainAspectRatio: false,\n    scales: {\n      \"y-axis-1\": {\n        ticks: ticksConf,\n      },\n      x: {\n        ticks: ticksConf,\n      },\n    },\n    plugins: {\n      tooltip: {\n        callbacks: {\n          afterLabel: (tooltip: any) => {\n            const index = tooltip.dataIndex;\n            const enemyComp = tooltip.dataset.enemyComp[index];\n            const win = tooltip.dataset.win[index];\n            return [enemyComp, `${win ? \"Win\" : \"Loss\"}`];\n          },\n        },\n      },\n    },\n  };\n  const data = {\n    labels: labelArr,\n    datasets: [\n      {\n        label: \"New Team Rating\",\n        data: teamRatingArr,\n        enemyComp: enemyTeamCompArr,\n        win: winArray,\n        fill: false,\n        backgroundColor: \"rgb(254,38,0)\",\n        borderColor: \"rgb(254,131,0)\",\n        yAxisID: \"y-axis-1\",\n      },\n      {\n        label: \"MMR\",\n        data: teamMMRArr,\n        enemyComp: enemyTeamCompArr,\n        win: winArray,\n        fill: false,\n        backgroundColor: \"rgb(0,196,255)\",\n        borderColor: \"rgb(0,255,255)\",\n        yAxisID: \"y-axis-1\",\n      },\n    ],\n  };\n\n  return (\n    <>\n      <div className=\"header\">\n        <h1 className=\"title\">Team Rating Change</h1>\n      </div>\n      <div className={\"chart-container\"}>\n        <Line data={data} options={options} />\n      </div>\n    </>\n  );\n};\n\nexport default LineChart;\n","import React, { useEffect, useState } from \"react\";\nimport {\n  MatchSessions,\n  ModdedArenaMatch,\n  RatingChangeDataset,\n  TeamCompDataset,\n} from \"../Types/ArenaTypes\";\nimport BarChart from \"./BarChart\";\nimport LineChart from \"./LineChart\";\nimport {\n  CHART_TYPES,\n  createRatingChangeDataSet,\n  createTeamCompDataSet,\n  matchArrayFromSelectedSessions,\n} from \"../utils/dataSetHelpers\";\n\nexport type chartContainerProps = {\n  sessionData: MatchSessions;\n  sessionSelection: number[];\n  chartType: string;\n};\n\nconst ChartWrapper: React.FC<chartContainerProps> = ({\n  sessionData,\n  sessionSelection,\n  chartType,\n}) => {\n  const [chartDataset, setChartDataset] = useState<\n    TeamCompDataset | RatingChangeDataset\n  >({});\n  const [localChartType, setLocalChartType] = useState<string>(\"\");\n\n  useEffect(() => {\n    const selectedSessionData: ModdedArenaMatch[] = [];\n    if (sessionData?.size) {\n      if (sessionSelection.includes(0)) {\n        selectedSessionData.push(\n          ...matchArrayFromSelectedSessions(sessionData)\n        );\n      } else {\n        const selectedMatches: MatchSessions = new Map();\n        sessionSelection.forEach((sessionKey) => {\n          const session = sessionData.get(sessionKey);\n          session && selectedMatches.set(sessionKey, session);\n        });\n        selectedSessionData.push(\n          ...matchArrayFromSelectedSessions(selectedMatches)\n        );\n      }\n    }\n\n    switch (chartType) {\n      case CHART_TYPES[0]: // \"Team comps\"\n        setChartDataset(createTeamCompDataSet(selectedSessionData));\n        break;\n      case CHART_TYPES[1]: // \"Rating change\"]\n        setChartDataset(createRatingChangeDataSet(selectedSessionData));\n        break;\n      default:\n        break;\n    }\n    setLocalChartType(chartType);\n  }, [chartType, sessionData, sessionSelection]);\n\n  return (\n    <div className={\"chart-wrapper\"}>\n      {localChartType === \"Team comps\" && (\n        <BarChart dataset={chartDataset as TeamCompDataset} />\n      )}\n      {localChartType === \"Rating change\" && (\n        <LineChart dataset={chartDataset as RatingChangeDataset} />\n      )}\n    </div>\n  );\n};\n\nexport default ChartWrapper;\n","import React, { useEffect, useState } from \"react\";\nimport UploadArea from \"./UploadArea\";\nimport { INSTANCE_DATA } from \"../utils/stateManagement\";\nimport { MatchSessions, ModdedArenaMatch } from \"../Types/ArenaTypes\";\nimport {\n  getModdedArenaMatches,\n  filterMatchData,\n  CHART_TYPES,\n} from \"../utils/dataSetHelpers\";\nimport { getSessions } from \"../utils/sessionManagement\";\nimport SessionSelect from \"./SessionSelect\";\nimport getTeams from \"../utils/teamManagement\";\nimport TeamSelect from \"./TeamSelect\";\nimport ButtonGroup from \"./ButtonGroup\";\nimport ChartWrapper from \"./ChartWrapper\";\n\nexport type dashboardProps = {\n  className?: string;\n};\n\nconst Dashboard: React.FC<dashboardProps> = () => {\n  const [moddedMatchData, setModdedMatchData] = useState<ModdedArenaMatch[]>(\n    []\n  );\n  const [myTeams, setMyTeams] = useState<string[]>([\"\"]);\n  const [myTeamSelection, setMyTeamSelection] = useState<string>(\"\");\n  const [sessionData, setSessionData] = useState<MatchSessions>(new Map());\n  const [sessionSelection, setSessionSelection] = useState<number[]>([0]);\n  const [chartType, setChartType] = useState<string>(\"Team comps\");\n  const [localStorageChanged, setLocalStorageChanged] =\n    useState<boolean>(false);\n\n  useEffect(() => {\n    // Local storage match data => Modified arena match data in local state\n    const localStorageMatchState = window.localStorage.getItem(INSTANCE_DATA);\n    if (localStorageMatchState) {\n      const parsedMatchData = JSON.parse(localStorageMatchState); // Get raw match data from storage\n      const moddedMatchData = getModdedArenaMatches(parsedMatchData); // Get modified match data\n      setModdedMatchData(moddedMatchData); // Put all modified match data in local state\n      setMyTeams(getTeams(moddedMatchData)); // Get team data\n    }\n  }, [localStorageChanged]);\n\n  useEffect(() => {\n    // Apply filters to modded match data and create session data based on result\n    const filteredMatchData = filterMatchData(moddedMatchData, myTeamSelection);\n    setSessionData(getSessions(filteredMatchData));\n    setSessionSelection([0]);\n  }, [moddedMatchData, myTeamSelection]);\n\n  return (\n    <div className=\"dashboard\">\n      <div className=\"dashboard__top-bar\">\n        <UploadArea\n          localStoreChangeHandler={setLocalStorageChanged}\n          localStorageChangeValue={localStorageChanged}\n        />\n        <div className=\"dashboard__filters\">\n          <ButtonGroup\n            onChange={setChartType}\n            buttonLabels={CHART_TYPES}\n            selected={chartType}\n          />\n          {myTeams && (\n            <TeamSelect onChange={setMyTeamSelection} teams={myTeams} />\n          )}\n          {sessionData && (\n            <SessionSelect\n              onChange={setSessionSelection}\n              sessionData={sessionData}\n            />\n          )}\n        </div>\n      </div>\n      {moddedMatchData && (\n        <ChartWrapper\n          sessionData={sessionData}\n          sessionSelection={sessionSelection}\n          chartType={chartType}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Dashboard;\n","import { ModdedArenaMatch } from \"../Types/ArenaTypes\";\n\nexport default function getTeams(matches: ModdedArenaMatch[]): string[] {\n  return [...new Set(matches.map((match) => match.myTeamName))];\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Dashboard from \"./components/Dashboard\";\n\nfunction App() {\n  return (\n    <div className=\"main-wrap\">\n      <Dashboard />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"normalize.css\";\nimport \"./styles/index.scss\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}